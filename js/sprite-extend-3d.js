!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("spritejs")):"function"==typeof define&&define.amd?define(["spritejs"],e):"object"==typeof exports?exports["sprite-extend-3d"]=e(require("spritejs")):(t.spritejs=t.spritejs||{},t.spritejs.ext3d=e(t.spritejs))}(this,(function(t){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/js/",i(i.s=2)}([function(e,i){e.exports=t},,function(t,e,i){"use strict";i.r(e),i.d(e,"Layer3d",(function(){return Bi})),i.d(e,"Sphere",(function(){return Ki})),i.d(e,"Torus",(function(){return on})),i.d(e,"Plane",(function(){return Ln})),i.d(e,"Polyline3d",(function(){return An})),i.d(e,"Camera",(function(){return ze})),i.d(e,"Cube",(function(){return un})),i.d(e,"Cylinder",(function(){return Bn})),i.d(e,"Path3d",(function(){return On})),i.d(e,"Mesh3d",(function(){return ii})),i.d(e,"Skin",(function(){return Hi})),i.d(e,"Group3d",(function(){return Ce})),i.d(e,"RenderTarget",(function(){return Vn})),i.d(e,"Shadow",(function(){return de})),i.d(e,"Light",(function(){return oe})),i.d(e,"TextureLoader",(function(){return $n})),i.d(e,"Geometry",(function(){return je})),i.d(e,"Curve",(function(){return bn})),i.d(e,"shaders",(function(){return n})),i.d(e,"Vec2",(function(){return l})),i.d(e,"Vec3",(function(){return x})),i.d(e,"Vec4",(function(){return E})),i.d(e,"Mat3",(function(){return _})),i.d(e,"Mat4",(function(){return R})),i.d(e,"Quat",(function(){return z})),i.d(e,"Euler",(function(){return F})),i.d(e,"GPGPU",(function(){return st})),i.d(e,"Raycast",(function(){return Et})),i.d(e,"FrameBuffer",(function(){return K}));var n={};i.r(n),i.d(n,"NORMAL",(function(){return or})),i.d(n,"BASE_GEOMETRY",(function(){return sr})),i.d(n,"GEOMETRY",(function(){return ar})),i.d(n,"NORMAL_GEOMETRY",(function(){return hr})),i.d(n,"TEXTURE",(function(){return lr})),i.d(n,"NORMAL_TEXTURE",(function(){return cr})),i.d(n,"GEOMETRY_WITH_TEXTURE",(function(){return ur})),i.d(n,"TEXTURE_CUBE",(function(){return dr})),i.d(n,"TEXTURE_WITH_SHADOW",(function(){return pr})),i.d(n,"GEOMETRY_WITH_SHADOW",(function(){return mr})),i.d(n,"POLYLINE",(function(){return gr})),i.d(n,"DASHLINE",(function(){return fr})),i.d(n,"TEXTURE_NORMAL_MAP_100",(function(){return vr})),i.d(n,"TEXTURE_NORMAL_MAP_WITH_BUMP_100",(function(){return yr})),i.d(n,"TEXTURE_NORMAL_MAP_300",(function(){return br})),i.d(n,"TEXTURE_NORMAL_MAP_WITH_BUMP_300",(function(){return xr})),i.d(n,"getTextureNormalMap",(function(){return wr})),i.d(n,"GEOMETRY_NORMAL_MAP_100",(function(){return Mr})),i.d(n,"GEOMETRY_NORMAL_MAP_WITH_BUMP_100",(function(){return Lr})),i.d(n,"GEOMETRY_NORMAL_MAP_300",(function(){return Er})),i.d(n,"GEOMETRY_NORMAL_MAP_WITH_BUMP_300",(function(){return Pr})),i.d(n,"getGeometryNormalMap",(function(){return _r}));function r(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t}function o(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t}function s(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t}function a(t){var e=t[0],i=t[1];return Math.sqrt(e*e+i*i)}function h(t,e){return t[0]*e[1]-t[1]*e[0]}class l extends Array{constructor(t=0,e=t){return super(t,e),this}get x(){return this[0]}get y(){return this[1]}set x(t){this[0]=t}set y(t){this[1]=t}set(t,e=t){return t.length?this.copy(t):(function(t,e,i){t[0]=e,t[1]=i}(this,t,e),this)}copy(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],this}add(t,e){return e?r(this,t,e):r(this,this,t),this}sub(t,e){return e?o(this,t,e):o(this,this,t),this}multiply(t){var e,i,n;return t.length?(i=this,n=t,(e=this)[0]=i[0]*n[0],e[1]=i[1]*n[1]):s(this,this,t),this}divide(t){var e,i,n;return t.length?(i=this,n=t,(e=this)[0]=i[0]/n[0],e[1]=i[1]/n[1]):s(this,this,1/t),this}inverse(t=this){var e,i;return i=t,(e=this)[0]=1/i[0],e[1]=1/i[1],this}len(){return a(this)}distance(t){return t?(e=this,n=(i=t)[0]-e[0],r=i[1]-e[1],Math.sqrt(n*n+r*r)):a(this);var e,i,n,r}squaredLen(){return this.squaredDistance()}squaredDistance(t){return t?(e=this,n=(i=t)[0]-e[0],r=i[1]-e[1],n*n+r*r):function(t){var e=t[0],i=t[1];return e*e+i*i}(this);var e,i,n,r}negate(t=this){var e,i;return i=t,(e=this)[0]=-i[0],e[1]=-i[1],this}cross(t,e){return e?h(t,e):h(this,t)}scale(t){return s(this,this,t),this}normalize(){var t,e,i,n,r;return t=this,i=(e=this)[0],n=e[1],(r=i*i+n*n)>0&&(r=1/Math.sqrt(r)),t[0]=e[0]*r,t[1]=e[1]*r,this}dot(t){return i=t,(e=this)[0]*i[0]+e[1]*i[1];var e,i}equals(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1];var e,i}applyMatrix3(t){var e,i,n,r,o;return e=this,n=t,r=(i=this)[0],o=i[1],e[0]=n[0]*r+n[3]*o+n[6],e[1]=n[1]*r+n[4]*o+n[7],this}applyMatrix4(t){return function(t,e,i){let n=e[0],r=e[1];t[0]=i[0]*n+i[4]*r+i[12],t[1]=i[1]*n+i[5]*r+i[13]}(this,this,t),this}lerp(t,e){!function(t,e,i,n){var r=e[0],o=e[1];t[0]=r+n*(i[0]-r),t[1]=o+n*(i[1]-o)}(this,this,t,e)}clone(){return new l(this[0],this[1])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t}}function c(t){let e=t[0],i=t[1],n=t[2];return Math.sqrt(e*e+i*i+n*n)}function u(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function d(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t}function p(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t}function m(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function g(t){let e=t[0],i=t[1],n=t[2];return e*e+i*i+n*n}function f(t,e){let i=e[0],n=e[1],r=e[2],o=i*i+n*n+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function v(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function y(t,e,i){let n=e[0],r=e[1],o=e[2],s=i[0],a=i[1],h=i[2];return t[0]=r*h-o*a,t[1]=o*s-n*h,t[2]=n*a-r*s,t}const b=function(){const t=[0,0,0],e=[0,0,0];return function(i,n){u(t,i),u(e,n),f(t,t),f(e,e);let r=v(t,e);return r>1?0:r<-1?Math.PI:Math.acos(r)}}();class x extends Array{constructor(t=0,e=t,i=t){return super(t,e,i),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,i=t){return t.length?this.copy(t):(function(t,e,i,n){t[0]=e,t[1]=i,t[2]=n}(this,t,e,i),this)}copy(t){return u(this,t),this}add(t,e){return e?d(this,t,e):d(this,this,t),this}sub(t,e){return e?p(this,t,e):p(this,this,t),this}multiply(t){var e,i,n;return t.length?(i=this,n=t,(e=this)[0]=i[0]*n[0],e[1]=i[1]*n[1],e[2]=i[2]*n[2]):m(this,this,t),this}divide(t){var e,i,n;return t.length?(i=this,n=t,(e=this)[0]=i[0]/n[0],e[1]=i[1]/n[1],e[2]=i[2]/n[2]):m(this,this,1/t),this}inverse(t=this){var e,i;return i=t,(e=this)[0]=1/i[0],e[1]=1/i[1],e[2]=1/i[2],this}len(){return c(this)}distance(t){return t?function(t,e){let i=e[0]-t[0],n=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(i*i+n*n+r*r)}(this,t):c(this)}squaredLen(){return g(this)}squaredDistance(t){return t?function(t,e){let i=e[0]-t[0],n=e[1]-t[1],r=e[2]-t[2];return i*i+n*n+r*r}(this,t):g(this)}negate(t=this){var e,i;return i=t,(e=this)[0]=-i[0],e[1]=-i[1],e[2]=-i[2],this}cross(t,e){return e?y(this,t,e):y(this,this,t),this}scale(t){return m(this,this,t),this}normalize(){return f(this,this),this}dot(t){return v(this,t)}equals(t){return i=t,(e=this)[0]===i[0]&&e[1]===i[1]&&e[2]===i[2];var e,i}applyMatrix4(t){return function(t,e,i){let n=e[0],r=e[1],o=e[2],s=i[3]*n+i[7]*r+i[11]*o+i[15];s=s||1,t[0]=(i[0]*n+i[4]*r+i[8]*o+i[12])/s,t[1]=(i[1]*n+i[5]*r+i[9]*o+i[13])/s,t[2]=(i[2]*n+i[6]*r+i[10]*o+i[14])/s}(this,this,t),this}scaleRotateMatrix4(t){return function(t,e,i){let n=e[0],r=e[1],o=e[2],s=i[3]*n+i[7]*r+i[11]*o+i[15];s=s||1,t[0]=(i[0]*n+i[4]*r+i[8]*o)/s,t[1]=(i[1]*n+i[5]*r+i[9]*o)/s,t[2]=(i[2]*n+i[6]*r+i[10]*o)/s}(this,this,t),this}applyQuaternion(t){return function(t,e,i){let n=e[0],r=e[1],o=e[2],s=i[0],a=i[1],h=i[2],l=a*o-h*r,c=h*n-s*o,u=s*r-a*n,d=a*u-h*c,p=h*l-s*u,m=s*c-a*l,g=2*i[3];l*=g,c*=g,u*=g,d*=2,p*=2,m*=2,t[0]=n+l+d,t[1]=r+c+p,t[2]=o+u+m}(this,this,t),this}angle(t){return b(this,t)}lerp(t,e){return function(t,e,i,n){let r=e[0],o=e[1],s=e[2];t[0]=r+n*(i[0]-r),t[1]=o+n*(i[1]-o),t[2]=s+n*(i[2]-s)}(this,this,t,e),this}clone(){return new x(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],i=this[1],n=this[2];return this[0]=t[0]*e+t[4]*i+t[8]*n,this[1]=t[1]*e+t[5]*i+t[9]*n,this[2]=t[2]*e+t[6]*i+t[10]*n,this.normalize()}}function w(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function M(t,e,i,n,r){return t[0]=e,t[1]=i,t[2]=n,t[3]=r,t}function L(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=i*i+n*n+r*r+o*o;return s>0&&(s=1/Math.sqrt(s)),t[0]=i*s,t[1]=n*s,t[2]=r*s,t[3]=o*s,t}class E extends Array{constructor(t=0,e=t,i=t,n=t){return super(t,e,i,n),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set w(t){this[3]=t}set(t,e,i,n){return t.length?this.copy(t):(M(this,t,e,i,n),this)}copy(t){return w(this,t),this}normalize(){return L(this,this),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}function P(t,e,i){let n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],d=i[0],p=i[1],m=i[2],g=i[3],f=i[4],v=i[5],y=i[6],b=i[7],x=i[8];return t[0]=d*n+p*s+m*l,t[1]=d*r+p*a+m*c,t[2]=d*o+p*h+m*u,t[3]=g*n+f*s+v*l,t[4]=g*r+f*a+v*c,t[5]=g*o+f*h+v*u,t[6]=y*n+b*s+x*l,t[7]=y*r+b*a+x*c,t[8]=y*o+b*h+x*u,t}class _ extends Array{constructor(t=1,e=0,i=0,n=0,r=1,o=0,s=0,a=0,h=1){return super(t,e,i,n,r,o,s,a,h),this}set(t,e,i,n,r,o,s,a,h){return t.length?this.copy(t):(function(t,e,i,n,r,o,s,a,h,l){t[0]=e,t[1]=i,t[2]=n,t[3]=r,t[4]=o,t[5]=s,t[6]=a,t[7]=h,t[8]=l}(this,t,e,i,n,r,o,s,a,h),this)}translate(t,e=this){return function(t,e,i){let n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],d=i[0],p=i[1];t[0]=n,t[1]=r,t[2]=o,t[3]=s,t[4]=a,t[5]=h,t[6]=d*n+p*s+l,t[7]=d*r+p*a+c,t[8]=d*o+p*h+u}(this,e,t),this}rotate(t,e=this){return function(t,e,i){let n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],d=Math.sin(i),p=Math.cos(i);t[0]=p*n+d*s,t[1]=p*r+d*a,t[2]=p*o+d*h,t[3]=p*s-d*n,t[4]=p*a-d*r,t[5]=p*h-d*o,t[6]=l,t[7]=c,t[8]=u}(this,e,t),this}scale(t,e=this){return function(t,e,i){let n=i[0],r=i[1];t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8]}(this,e,t),this}multiply(t,e){return e?P(this,t,e):P(this,this,t),this}identity(){var t;return(t=this)[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,this}copy(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}fromMatrix4(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[4],e[4]=i[5],e[5]=i[6],e[6]=i[8],e[7]=i[9],e[8]=i[10],this}fromQuaternion(t){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=i+i,a=n+n,h=r+r,l=i*s,c=n*s,u=n*a,d=r*s,p=r*a,m=r*h,g=o*s,f=o*a,v=o*h;t[0]=1-u-m,t[3]=c-v,t[6]=d+f,t[1]=c+v,t[4]=1-l-m,t[7]=p-g,t[2]=d-f,t[5]=p+g,t[8]=1-l-u}(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],h=e[6],l=e[7],c=e[8],u=c*s-a*l,d=-c*o+a*h,p=l*o-s*h,m=i*u+n*d+r*p;m&&(m=1/m,t[0]=u*m,t[1]=(-c*n+r*l)*m,t[2]=(a*n-r*s)*m,t[3]=d*m,t[4]=(c*i-r*h)*m,t[5]=(-a*i+r*o)*m,t[6]=p*m,t[7]=(-l*i+n*h)*m,t[8]=(s*i-n*o)*m)}(this,t),this}getNormalMatrix(t){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],h=e[6],l=e[7],c=e[8],u=e[9],d=e[10],p=e[11],m=e[12],g=e[13],f=e[14],v=e[15],y=i*a-n*s,b=i*h-r*s,x=i*l-o*s,w=n*h-r*a,M=n*l-o*a,L=r*l-o*h,E=c*g-u*m,P=c*f-d*m,_=c*v-p*m,A=u*f-d*g,S=u*v-p*g,C=d*v-p*f,R=y*C-b*S+x*A+w*_-M*P+L*E;R&&(R=1/R,t[0]=(a*C-h*S+l*A)*R,t[1]=(h*_-s*C-l*P)*R,t[2]=(s*S-a*_+l*E)*R,t[3]=(r*S-n*C-o*A)*R,t[4]=(i*C-r*_+o*P)*R,t[5]=(n*_-i*S-o*E)*R,t[6]=(g*L-f*M+v*w)*R,t[7]=(f*x-m*L-v*b)*R,t[8]=(m*M-g*x+v*y)*R)}(this,t),this}}function A(t,e,i){let n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],d=e[9],p=e[10],m=e[11],g=e[12],f=e[13],v=e[14],y=e[15],b=i[0],x=i[1],w=i[2],M=i[3];return t[0]=b*n+x*a+w*u+M*g,t[1]=b*r+x*h+w*d+M*f,t[2]=b*o+x*l+w*p+M*v,t[3]=b*s+x*c+w*m+M*y,b=i[4],x=i[5],w=i[6],M=i[7],t[4]=b*n+x*a+w*u+M*g,t[5]=b*r+x*h+w*d+M*f,t[6]=b*o+x*l+w*p+M*v,t[7]=b*s+x*c+w*m+M*y,b=i[8],x=i[9],w=i[10],M=i[11],t[8]=b*n+x*a+w*u+M*g,t[9]=b*r+x*h+w*d+M*f,t[10]=b*o+x*l+w*p+M*v,t[11]=b*s+x*c+w*m+M*y,b=i[12],x=i[13],w=i[14],M=i[15],t[12]=b*n+x*a+w*u+M*g,t[13]=b*r+x*h+w*d+M*f,t[14]=b*o+x*l+w*p+M*v,t[15]=b*s+x*c+w*m+M*y,t}function S(t,e){let i=e[0],n=e[1],r=e[2],o=e[4],s=e[5],a=e[6],h=e[8],l=e[9],c=e[10];return t[0]=Math.hypot(i,n,r),t[1]=Math.hypot(o,s,a),t[2]=Math.hypot(h,l,c),t}const C=function(){const t=[0,0,0];return function(e,i){let n=t;S(n,i);let r=1/n[0],o=1/n[1],s=1/n[2],a=i[0]*r,h=i[1]*o,l=i[2]*s,c=i[4]*r,u=i[5]*o,d=i[6]*s,p=i[8]*r,m=i[9]*o,g=i[10]*s,f=a+u+g,v=0;return f>0?(v=2*Math.sqrt(f+1),e[3]=.25*v,e[0]=(d-m)/v,e[1]=(p-l)/v,e[2]=(h-c)/v):a>u&&a>g?(v=2*Math.sqrt(1+a-u-g),e[3]=(d-m)/v,e[0]=.25*v,e[1]=(h+c)/v,e[2]=(p+l)/v):u>g?(v=2*Math.sqrt(1+u-a-g),e[3]=(p-l)/v,e[0]=(h+c)/v,e[1]=.25*v,e[2]=(d+m)/v):(v=2*Math.sqrt(1+g-a-u),e[3]=(h-c)/v,e[0]=(p+l)/v,e[1]=(d+m)/v,e[2]=.25*v),e}}();class R extends Array{constructor(t=1,e=0,i=0,n=0,r=0,o=1,s=0,a=0,h=0,l=0,c=1,u=0,d=0,p=0,m=0,g=1){return super(t,e,i,n,r,o,s,a,h,l,c,u,d,p,m,g),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,i,n,r,o,s,a,h,l,c,u,d,p,m,g){return t.length?this.copy(t):(function(t,e,i,n,r,o,s,a,h,l,c,u,d,p,m,g,f){t[0]=e,t[1]=i,t[2]=n,t[3]=r,t[4]=o,t[5]=s,t[6]=a,t[7]=h,t[8]=l,t[9]=c,t[10]=u,t[11]=d,t[12]=p,t[13]=m,t[14]=g,t[15]=f}(this,t,e,i,n,r,o,s,a,h,l,c,u,d,p,m,g),this)}translate(t,e=this){return function(t,e,i){let n,r,o,s,a,h,l,c,u,d,p,m,g=i[0],f=i[1],v=i[2];e===t?(t[12]=e[0]*g+e[4]*f+e[8]*v+e[12],t[13]=e[1]*g+e[5]*f+e[9]*v+e[13],t[14]=e[2]*g+e[6]*f+e[10]*v+e[14],t[15]=e[3]*g+e[7]*f+e[11]*v+e[15]):(n=e[0],r=e[1],o=e[2],s=e[3],a=e[4],h=e[5],l=e[6],c=e[7],u=e[8],d=e[9],p=e[10],m=e[11],t[0]=n,t[1]=r,t[2]=o,t[3]=s,t[4]=a,t[5]=h,t[6]=l,t[7]=c,t[8]=u,t[9]=d,t[10]=p,t[11]=m,t[12]=n*g+a*f+u*v+e[12],t[13]=r*g+h*f+d*v+e[13],t[14]=o*g+l*f+p*v+e[14],t[15]=s*g+c*f+m*v+e[15])}(this,e,t),this}rotate(t,e,i=this){return function(t,e,i,n){let r,o,s,a,h,l,c,u,d,p,m,g,f,v,y,b,x,w,M,L,E,P,_,A,S=n[0],C=n[1],R=n[2],N=Math.hypot(S,C,R);Math.abs(N)<1e-6||(N=1/N,S*=N,C*=N,R*=N,r=Math.sin(i),o=Math.cos(i),s=1-o,a=e[0],h=e[1],l=e[2],c=e[3],u=e[4],d=e[5],p=e[6],m=e[7],g=e[8],f=e[9],v=e[10],y=e[11],b=S*S*s+o,x=C*S*s+R*r,w=R*S*s-C*r,M=S*C*s-R*r,L=C*C*s+o,E=R*C*s+S*r,P=S*R*s+C*r,_=C*R*s-S*r,A=R*R*s+o,t[0]=a*b+u*x+g*w,t[1]=h*b+d*x+f*w,t[2]=l*b+p*x+v*w,t[3]=c*b+m*x+y*w,t[4]=a*M+u*L+g*E,t[5]=h*M+d*L+f*E,t[6]=l*M+p*L+v*E,t[7]=c*M+m*L+y*E,t[8]=a*P+u*_+g*A,t[9]=h*P+d*_+f*A,t[10]=l*P+p*_+v*A,t[11]=c*P+m*_+y*A,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]))}(this,i,t,e),this}scale(t,e=this){return function(t,e,i){let n=i[0],r=i[1],o=i[2];t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?A(this,t,e):A(this,this,t),this}identity(){var t;return(t=this)[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}copy(t){var e,i;return i=t,(e=this)[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}fromPerspective({fov:t,aspect:e,near:i,far:n}={}){return function(t,e,i,n,r){let o=1/Math.tan(e/2),s=1/(n-r);t[0]=o/i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+n)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*n*s,t[15]=0}(this,t,e,i,n),this}fromOrthogonal({left:t,right:e,bottom:i,top:n,near:r,far:o}){return function(t,e,i,n,r,o,s){let a=1/(e-i),h=1/(n-r),l=1/(o-s);t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+i)*a,t[13]=(r+n)*h,t[14]=(s+o)*l,t[15]=1}(this,t,e,i,n,r,o),this}fromQuaternion(t){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=i+i,a=n+n,h=r+r,l=i*s,c=n*s,u=n*a,d=r*s,p=r*a,m=r*h,g=o*s,f=o*a,v=o*h;t[0]=1-u-m,t[1]=c+v,t[2]=d-f,t[3]=0,t[4]=c-v,t[5]=1-l-m,t[6]=p+g,t[7]=0,t[8]=d+f,t[9]=p-g,t[10]=1-l-u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1}(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=e[4],a=e[5],h=e[6],l=e[7],c=e[8],u=e[9],d=e[10],p=e[11],m=e[12],g=e[13],f=e[14],v=e[15],y=i*a-n*s,b=i*h-r*s,x=i*l-o*s,w=n*h-r*a,M=n*l-o*a,L=r*l-o*h,E=c*g-u*m,P=c*f-d*m,_=c*v-p*m,A=u*f-d*g,S=u*v-p*g,C=d*v-p*f,R=y*C-b*S+x*A+w*_-M*P+L*E;R&&(R=1/R,t[0]=(a*C-h*S+l*A)*R,t[1]=(r*S-n*C-o*A)*R,t[2]=(g*L-f*M+v*w)*R,t[3]=(d*M-u*L-p*w)*R,t[4]=(h*_-s*C-l*P)*R,t[5]=(i*C-r*_+o*P)*R,t[6]=(f*x-m*L-v*b)*R,t[7]=(c*L-d*x+p*b)*R,t[8]=(s*S-a*_+l*E)*R,t[9]=(n*_-i*S-o*E)*R,t[10]=(m*M-g*x+v*y)*R,t[11]=(u*x-c*M-p*y)*R,t[12]=(a*P-s*A-h*E)*R,t[13]=(i*A-n*P+r*E)*R,t[14]=(g*b-m*w-f*y)*R,t[15]=(c*w-u*b+d*y)*R)}(this,t),this}compose(t,e,i){return function(t,e,i,n){let r=e[0],o=e[1],s=e[2],a=e[3],h=r+r,l=o+o,c=s+s,u=r*h,d=r*l,p=r*c,m=o*l,g=o*c,f=s*c,v=a*h,y=a*l,b=a*c,x=n[0],w=n[1],M=n[2];t[0]=(1-(m+f))*x,t[1]=(d+b)*x,t[2]=(p-y)*x,t[3]=0,t[4]=(d-b)*w,t[5]=(1-(u+f))*w,t[6]=(g+v)*w,t[7]=0,t[8]=(p+y)*M,t[9]=(g-v)*M,t[10]=(1-(u+m))*M,t[11]=0,t[12]=i[0],t[13]=i[1],t[14]=i[2],t[15]=1}(this,t,e,i),this}getRotation(t){return C(t,this),this}getTranslation(t){var e,i;return i=this,(e=t)[0]=i[12],e[1]=i[13],e[2]=i[14],this}getScaling(t){return S(t,this),this}getMaxScaleOnAxis(){return function(t){let e=t[0],i=t[1],n=t[2],r=t[4],o=t[5],s=t[6],a=t[8],h=t[9],l=t[10];const c=e*e+i*i+n*n,u=r*r+o*o+s*s,d=a*a+h*h+l*l;return Math.sqrt(Math.max(c,u,d))}(this)}lookAt(t,e,i){return function(t,e,i,n){let r=e[0],o=e[1],s=e[2],a=n[0],h=n[1],l=n[2],c=r-i[0],u=o-i[1],d=s-i[2],p=c*c+u*u+d*d;0===p?d=1:(p=1/Math.sqrt(p),c*=p,u*=p,d*=p);let m=h*d-l*u,g=l*c-a*d,f=a*u-h*c;p=m*m+g*g+f*f,0===p&&(l?a+=1e-6:h?l+=1e-6:h+=1e-6,m=h*d-l*u,g=l*c-a*d,f=a*u-h*c,p=m*m+g*g+f*f),p=1/Math.sqrt(p),m*=p,g*=p,f*=p,t[0]=m,t[1]=g,t[2]=f,t[3]=0,t[4]=u*f-d*g,t[5]=d*m-c*f,t[6]=c*g-u*m,t[7]=0,t[8]=c,t[9]=u,t[10]=d,t[11]=0,t[12]=r,t[13]=o,t[14]=s,t[15]=1}(this,t,e,i),this}determinant(){return function(t){let e=t[0],i=t[1],n=t[2],r=t[3],o=t[4],s=t[5],a=t[6],h=t[7],l=t[8],c=t[9],u=t[10],d=t[11],p=t[12],m=t[13],g=t[14],f=t[15];return(e*s-i*o)*(u*f-d*g)-(e*a-n*o)*(c*f-d*m)+(e*h-r*o)*(c*g-u*m)+(i*a-n*s)*(l*f-d*p)-(i*h-r*s)*(l*g-u*p)+(n*h-r*a)*(l*m-c*p)}(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}function N(t,e,i){let n=e[0],r=e[1],o=e[2],s=e[3],a=i[0],h=i[1],l=i[2],c=i[3];return t[0]=n*c+s*a+r*l-o*h,t[1]=r*c+s*h+o*a-n*l,t[2]=o*c+s*l+n*h-r*a,t[3]=s*c-n*a-r*h-o*l,t}const B=w,D=M,U=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},T=L;class z extends Array{constructor(t=0,e=0,i=0,n=1){return super(t,e,i,n),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){var t;return(t=this)[0]=0,t[1]=0,t[2]=0,t[3]=1,this.onChange(),this}set(t,e,i,n){return t.length?this.copy(t):(D(this,t,e,i,n),this.onChange(),this)}rotateX(t){return function(t,e,i){i*=.5;let n=e[0],r=e[1],o=e[2],s=e[3],a=Math.sin(i),h=Math.cos(i);t[0]=n*h+s*a,t[1]=r*h+o*a,t[2]=o*h-r*a,t[3]=s*h-n*a}(this,this,t),this.onChange(),this}rotateY(t){return function(t,e,i){i*=.5;let n=e[0],r=e[1],o=e[2],s=e[3],a=Math.sin(i),h=Math.cos(i);t[0]=n*h-o*a,t[1]=r*h+s*a,t[2]=o*h+n*a,t[3]=s*h-r*a}(this,this,t),this.onChange(),this}rotateZ(t){return function(t,e,i){i*=.5;let n=e[0],r=e[1],o=e[2],s=e[3],a=Math.sin(i),h=Math.cos(i);t[0]=n*h+r*a,t[1]=r*h-n*a,t[2]=o*h+s*a,t[3]=s*h-o*a}(this,this,t),this.onChange(),this}inverse(t=this){return function(t,e){let i=e[0],n=e[1],r=e[2],o=e[3],s=i*i+n*n+r*r+o*o,a=s?1/s:0;t[0]=-i*a,t[1]=-n*a,t[2]=-r*a,t[3]=o*a}(this,t),this.onChange(),this}conjugate(t=this){var e,i;return i=t,(e=this)[0]=-i[0],e[1]=-i[1],e[2]=-i[2],e[3]=i[3],this.onChange(),this}copy(t){return B(this,t),this.onChange(),this}normalize(t=this){return T(this,t),this.onChange(),this}multiply(t,e){return e?N(this,t,e):N(this,this,t),this.onChange(),this}dot(t){return U(this,t)}fromMatrix3(t){return function(t,e){let i,n=e[0]+e[4]+e[8];if(n>0)i=Math.sqrt(n+1),t[3]=.5*i,i=.5/i,t[0]=(e[5]-e[7])*i,t[1]=(e[6]-e[2])*i,t[2]=(e[1]-e[3])*i;else{let n=0;e[4]>e[0]&&(n=1),e[8]>e[3*n+n]&&(n=2);let r=(n+1)%3,o=(n+2)%3;i=Math.sqrt(e[3*n+n]-e[3*r+r]-e[3*o+o]+1),t[n]=.5*i,i=.5/i,t[3]=(e[3*r+o]-e[3*o+r])*i,t[r]=(e[3*r+n]+e[3*n+r])*i,t[o]=(e[3*o+n]+e[3*n+o])*i}}(this,t),this.onChange(),this}fromEuler(t){return function(t,e,i="YXZ"){let n=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),o=Math.sin(.5*e[1]),s=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),h=Math.cos(.5*e[2]);"XYZ"===i?(t[0]=n*s*h+r*o*a,t[1]=r*o*h-n*s*a,t[2]=r*s*a+n*o*h,t[3]=r*s*h-n*o*a):"YXZ"===i?(t[0]=n*s*h+r*o*a,t[1]=r*o*h-n*s*a,t[2]=r*s*a-n*o*h,t[3]=r*s*h+n*o*a):"ZXY"===i?(t[0]=n*s*h-r*o*a,t[1]=r*o*h+n*s*a,t[2]=r*s*a+n*o*h,t[3]=r*s*h-n*o*a):"ZYX"===i?(t[0]=n*s*h-r*o*a,t[1]=r*o*h+n*s*a,t[2]=r*s*a-n*o*h,t[3]=r*s*h+n*o*a):"YZX"===i?(t[0]=n*s*h+r*o*a,t[1]=r*o*h+n*s*a,t[2]=r*s*a-n*o*h,t[3]=r*s*h-n*o*a):"XZY"===i&&(t[0]=n*s*h-r*o*a,t[1]=r*o*h-n*s*a,t[2]=r*s*a+n*o*h,t[3]=r*s*h+n*o*a)}(this,t,t.order),this}fromAxisAngle(t,e){return function(t,e,i){i*=.5;let n=Math.sin(i);t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=Math.cos(i)}(this,t,e),this}slerp(t,e){return function(t,e,i,n){let r,o,s,a,h,l=e[0],c=e[1],u=e[2],d=e[3],p=i[0],m=i[1],g=i[2],f=i[3];o=l*p+c*m+u*g+d*f,o<0&&(o=-o,p=-p,m=-m,g=-g,f=-f),1-o>1e-6?(r=Math.acos(o),s=Math.sin(r),a=Math.sin((1-n)*r)/s,h=Math.sin(n*r)/s):(a=1-n,h=n),t[0]=a*l+h*p,t[1]=a*c+h*m,t[2]=a*u+h*g,t[3]=a*d+h*f}(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}const O=new R;class F extends Array{constructor(t=0,e=t,i=t,n="YXZ"){return super(t,e,i),this.order=n,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,i=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=i,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return function(t,e,i="YXZ"){"XYZ"===i?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===i?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===i?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===i?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===i?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===i&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0))}(this,t,e),this}fromQuaternion(t,e=this.order){return O.fromQuaternion(t),this.fromRotationMatrix(O,e)}}let j=1;const I={};class G{constructor(t,{vertex:e,fragment:i,uniforms:n={},transparent:r=!1,cullFace:o=t.BACK,frontFace:s=t.CCW,depthTest:a=!0,depthWrite:h=!0,depthFunc:l=t.LESS}={}){t.canvas||console.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=j++,e||console.warn("vertex shader not supplied"),i||console.warn("fragment shader not supplied"),this.transparent=r,this.cullFace=o,this.frontFace=s,this.depthTest=a,this.depthWrite=h,this.depthFunc=l,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const c=t.createShader(t.VERTEX_SHADER);t.shaderSource(c,e),t.compileShader(c),""!==t.getShaderInfoLog(c)&&console.warn(`${t.getShaderInfoLog(c)}\nVertex Shader\n${V(e)}`);const u=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(u,i),t.compileShader(u),""!==t.getShaderInfoLog(u)&&console.warn(`${t.getShaderInfoLog(u)}\nFragment Shader\n${V(i)}`),this.program=t.createProgram(),t.attachShader(this.program,c),t.attachShader(this.program,u),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return console.warn(t.getProgramInfoLog(this.program));t.deleteShader(c),t.deleteShader(u),this.uniformLocations=new Map;let d=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<d;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const n=i.name.match(/(\w+)/g);i.uniformName=n[0],3===n.length?(i.isStructArray=!0,i.structIndex=Number(n[1]),i.structProperty=n[2]):2===n.length&&isNaN(Number(n[1]))&&(i.isStruct=!0,i.structProperty=n[1])}this.attributeLocations=new Map;const p=[],m=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<m;e++){const i=t.getActiveAttrib(this.program,e),n=t.getAttribLocation(this.program,i.name);p[n]=i.name,this.attributeLocations.set(i,n)}this.attributeOrder=p.join("")}setBlendFunc(t,e,i,n){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=n,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.blendEquation.modeRGB&&this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach((t,i)=>{let n=i.uniformName,r=this.uniforms[n];if(i.isStruct&&(r=r[i.structProperty],n+="."+i.structProperty),i.isStructArray&&(r=r[i.structIndex][i.structProperty],n+=`[${i.structIndex}].${i.structProperty}`),!r)return Y(`Active uniform ${n} has not been supplied`);if(r&&void 0===r.value)return Y(n+" uniform is missing a value parameter");if(r.value.texture)return e+=1,r.value.update(e),k(this.gl,i.type,t,e);if(r.value.length&&r.value[0].texture){const n=[];return r.value.forEach(t=>{e+=1,t.update(e),n.push(e)}),k(this.gl,i.type,t,n)}k(this.gl,i.type,t,r.value)}),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function k(t,e,i,n){n=n.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const n=e*i;let r=I[n];r||(I[n]=r=new Float32Array(n));for(let n=0;n<e;n++)r.set(t[n],n*i);return r}(n):n;const r=t.renderer.state.uniformLocations.get(i);if(n.length)if(void 0===r||r.length!==n.length)t.renderer.state.uniformLocations.set(i,n.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}(r,n))return;r.set?r.set(n):function(t,e){for(let i=0,n=t.length;i<n;i++)t[i]=e[i]}(r,n),t.renderer.state.uniformLocations.set(i,r)}else{if(r===n)return;t.renderer.state.uniformLocations.set(i,n)}switch(e){case 5126:return n.length?t.uniform1fv(i,n):t.uniform1f(i,n);case 35664:return t.uniform2fv(i,n);case 35665:return t.uniform3fv(i,n);case 35666:return t.uniform4fv(i,n);case 35670:case 5124:case 35678:case 35680:return n.length?t.uniform1iv(i,n):t.uniform1i(i,n);case 35671:case 35667:return t.uniform2iv(i,n);case 35672:case 35668:return t.uniform3iv(i,n);case 35673:case 35669:return t.uniform4iv(i,n);case 35674:return t.uniformMatrix2fv(i,!1,n);case 35675:return t.uniformMatrix3fv(i,!1,n);case 35676:return t.uniformMatrix4fv(i,!1,n)}}function V(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let X=0;function Y(t){X>100||(console.warn(t),X++,X>100&&console.warn("More than 100 program warnings - stopping logs."))}class q{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new R,this.worldMatrix=new R,this.matrixAutoUpdate=!0,this.position=new x,this.quaternion=new z,this.scale=new x(1),this.rotation=new F,this.up=new x(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){e&&this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,i=this.children.length;e<i;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,i=this.children.length;e<i;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}let W=0;class H extends q{constructor(t,{geometry:e,program:i,mode:n=t.TRIANGLES,frustumCulled:r=!0,renderOrder:o=0}={}){super(),t.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=W++,this.geometry=e,this.program=i,this.mode=n,this.frustumCulled=r,this.renderOrder=o,this.modelViewMatrix=new R,this.normalMatrix=new _,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach(e=>e&&e({mesh:this,camera:t})),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach(e=>e&&e({mesh:this,camera:t}))}}const Z=new Uint8Array(4);function $(t){return 0==(t&t-1)}let Q=1;class J{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:n=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:o=r,wrapS:s=t.CLAMP_TO_EDGE,wrapT:a=t.CLAMP_TO_EDGE,generateMipmaps:h=!0,minFilter:l=(h?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:c=t.LINEAR,premultiplyAlpha:u=!1,unpackAlignment:d=4,flipY:p=i==t.TEXTURE_2D,anisotropy:m=0,level:g=0,width:f,height:v=f}={}){this.gl=t,this.id=Q++,this.image=e,this.target=i,this.type=n,this.format=r,this.internalFormat=o,this.minFilter=l,this.magFilter=c,this.wrapS=s,this.wrapT=a,this.generateMipmaps=h,this.premultiplyAlpha=u,this.unpackAlignment=d,this.flipY=p,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=f,this.height=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||$(this.image.width)&&$(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,Z);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,Z);this.store.image=this.image}}}class K{constructor(t,{width:e=t.canvas.width,height:i=t.canvas.height,target:n=t.FRAMEBUFFER,color:r=1,depth:o=!0,stencil:s=!1,depthTexture:a=!1,wrapS:h=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,minFilter:c=t.LINEAR,magFilter:u=c,type:d=t.UNSIGNED_BYTE,format:p=t.RGBA,internalFormat:m=p,unpackAlignment:g,premultiplyAlpha:f}={}){this.gl=t,this.width=e,this.height=i,this.depth=o,this.buffer=this.gl.createFramebuffer(),this.target=n,this.gl.bindFramebuffer(this.target,this.buffer),this.textures=[];const v=[];for(let n=0;n<r;n++)this.textures.push(new J(t,{width:e,height:i,wrapS:h,wrapT:l,minFilter:c,magFilter:u,type:d,format:p,internalFormat:m,unpackAlignment:g,premultiplyAlpha:f,flipY:!1,generateMipmaps:!1})),this.textures[n].update(),this.gl.framebufferTexture2D(this.target,this.gl.COLOR_ATTACHMENT0+n,this.gl.TEXTURE_2D,this.textures[n].texture,0),v.push(this.gl.COLOR_ATTACHMENT0+n);v.length>1&&this.gl.renderer.drawBuffers(v),this.texture=this.textures[0],a&&(this.gl.renderer.isWebgl2||this.gl.renderer.getExtension("WEBGL_depth_texture"))?(this.depthTexture=new J(t,{width:e,height:i,minFilter:this.gl.NEAREST,magFilter:this.gl.NEAREST,format:this.gl.DEPTH_COMPONENT,internalFormat:t.renderer.isWebgl2?this.gl.DEPTH_COMPONENT16:this.gl.DEPTH_COMPONENT,type:this.gl.UNSIGNED_INT}),this.depthTexture.update(),this.gl.framebufferTexture2D(this.target,this.gl.DEPTH_ATTACHMENT,this.gl.TEXTURE_2D,this.depthTexture.texture,0)):(o&&!s&&(this.depthBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_COMPONENT16,e,i),this.gl.framebufferRenderbuffer(this.target,this.gl.DEPTH_ATTACHMENT,this.gl.RENDERBUFFER,this.depthBuffer)),s&&!o&&(this.stencilBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.stencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.STENCIL_INDEX8,e,i),this.gl.framebufferRenderbuffer(this.target,this.gl.STENCIL_ATTACHMENT,this.gl.RENDERBUFFER,this.stencilBuffer)),o&&s&&(this.depthStencilBuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.depthStencilBuffer),this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,e,i),this.gl.framebufferRenderbuffer(this.target,this.gl.DEPTH_STENCIL_ATTACHMENT,this.gl.RENDERBUFFER,this.depthStencilBuffer))),this.gl.bindFramebuffer(this.target,null)}}const tt=new x;let et=1,it=1,nt=!1;class rt{constructor(t,e={}){t.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=et++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=it++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.buffer||(e.buffer=this.gl.createBuffer(),this.updateAttribute(e)),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),this.gl.bufferData(t.target,t.data,this.gl.STATIC_DRAW),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach((t,{name:e,type:i})=>{if(!this.attributes[e])return void console.warn(`active attribute ${e} not being supplied`);const n=this.attributes[e];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let r=1;35674===i&&(r=2),35675===i&&(r=3),35676===i&&(r=4);const o=n.size/r,s=1===r?0:r*r*r,a=1===r?0:r*r;for(let e=0;e<r;e++)this.gl.vertexAttribPointer(t+e,o,n.type,n.normalized,n.stride+s,n.offset+e*a),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,n.divisor)}),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach((t,{name:e})=>{const i=this.attributes[e];i.needsUpdate&&this.updateAttribute(i)}),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPositionArray(){const t=this.attributes.position;return t.min?[...t.min,...t.max]:t.data?t.data:nt?void 0:(console.warn("No position buffer data found to compute bounds"),nt=!0)}computeBoundingBox(t){t||(t=this.getPositionArray()),this.bounds||(this.bounds={min:new x,max:new x,center:new x,scale:new x,radius:1/0});const e=this.bounds.min,i=this.bounds.max,n=this.bounds.center,r=this.bounds.scale;e.set(1/0),i.set(-1/0);for(let n=0,r=t.length;n<r;n+=3){const r=t[n],o=t[n+1],s=t[n+2];e.x=Math.min(r,e.x),e.y=Math.min(o,e.y),e.z=Math.min(s,e.z),i.x=Math.max(r,i.x),i.y=Math.max(o,i.y),i.z=Math.max(s,i.z)}r.sub(i,e),n.add(e,i).divide(2)}computeBoundingSphere(t){t||(t=this.getPositionArray()),this.bounds||this.computeBoundingBox(t);let e=0;for(let i=0,n=t.length;i<n;i+=3)tt.fromArray(t,i),e=Math.max(e,this.bounds.center.squaredDistance(tt));this.bounds.radius=Math.sqrt(e)}remove(){this.vao&&this.gl.renderer.deleteVertexArray(this.vao);for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}class ot extends rt{constructor(t,{attributes:e={}}={}){Object.assign(e,{position:{size:2,data:new Float32Array([-1,-1,3,-1,-1,3])},uv:{size:2,data:new Float32Array([0,0,2,0,0,2])}}),super(t,e)}}class st{constructor(t,{data:e=new Float32Array(16),geometry:i=new ot(t),type:n}){this.gl=t;const r=e;this.passes=[],this.geometry=i,this.dataLength=r.length/4,this.size=Math.pow(2,Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength)))/Math.LN2)),this.coords=new Float32Array(2*this.dataLength);for(let t=0;t<this.dataLength;t++){const e=t%this.size/this.size,i=Math.floor(t/this.size)/this.size;this.coords.set([e,i],2*t)}const o=(()=>{if(r.length===this.size*this.size*4)return r;{const t=new Float32Array(this.size*this.size*4);return t.set(r),t}})();this.uniform={value:new J(t,{image:o,target:t.TEXTURE_2D,type:t.FLOAT,format:t.RGBA,internalFormat:t.renderer.isWebgl2?t.RGBA32F:t.RGBA,wrapS:t.CLAMP_TO_EDGE,wrapT:t.CLAMP_TO_EDGE,generateMipmaps:!1,minFilter:t.NEAREST,magFilter:t.NEAREST,width:this.size,flipY:!1})};const s={width:this.size,height:this.size,type:n||t.HALF_FLOAT||t.renderer.extensions.OES_texture_half_float.HALF_FLOAT_OES,format:t.RGBA,internalFormat:t.renderer.isWebgl2?n===t.FLOAT?t.RGBA32F:t.RGBA16F:t.RGBA,minFilter:t.NEAREST,depth:!1,unpackAlignment:1};this.fbo={read:new K(t,s),write:new K(t,s),swap:()=>{let t=this.fbo.read;this.fbo.read=this.fbo.write,this.fbo.write=t,this.uniform.value=this.fbo.read.texture}}}addPass({vertex:t=at,fragment:e=ht,uniforms:i={},textureUniform:n="tMap",enabled:r=!0}={}){i[n]=this.uniform;const o=new G(this.gl,{vertex:t,fragment:e,uniforms:i}),s={mesh:new H(this.gl,{geometry:this.geometry,program:o}),program:o,uniforms:i,enabled:r,textureUniform:n};return this.passes.push(s),s}render(){this.passes.filter(t=>t.enabled).forEach((t,e)=>{this.gl.renderer.render({scene:t.mesh,target:this.fbo.write,clear:!1}),this.fbo.swap()})}}const at="\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n",ht="\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n",lt=new l,ct=new l,ut=new l,dt=new x,pt=new x,mt=new x,gt=new x,ft=new x,vt=new x,yt=new x,bt=new x,xt=new x,wt=new x,Mt=new x,Lt=new R;class Et{constructor(){this.origin=new x,this.direction=new x}castMouse(t,e=[0,0]){if("orthographic"===t.type){const{left:i,right:n,bottom:r,top:o,zoom:s}=t,a=i/s+(n-i)/s*(.5*e[0]+.5),h=r/s+(o-r)/s*(.5*e[1]+.5);this.origin.set(a,h,0),this.origin.applyMatrix4(t.worldMatrix),this.direction.x=-t.worldMatrix[8],this.direction.y=-t.worldMatrix[9],this.direction.z=-t.worldMatrix[10]}else t.worldMatrix.getTranslation(this.origin),this.direction.set(e[0],e[1],.5),t.unproject(this.direction),this.direction.sub(this.origin).normalize()}intersectBounds(t,{maxDistance:e,output:i=[]}={}){Array.isArray(t)||(t=[t]);const n=Lt,r=dt,o=pt,s=i;return s.length=0,t.forEach(t=>{t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere();const i=t.geometry.bounds;let a;if(n.inverse(t.worldMatrix),e&&(o.copy(this.direction).scaleRotateMatrix4(n),a=e*o.len()),r.copy(this.origin).applyMatrix4(n),o.copy(this.direction).transformDirection(n),e&&r.distance(i.center)-i.radius>a)return;let h=0;if("sphere"===t.geometry.raycast){if(r.distance(i.center)>i.radius&&(h=this.intersectSphere(i,r,o),!h))return}else if((r.x<i.min.x||r.x>i.max.x||r.y<i.min.y||r.y>i.max.y||r.z<i.min.z||r.z>i.max.z)&&(h=this.intersectBox(i,r,o),!h))return;e&&h>a||(t.hit||(t.hit={localPoint:new x,point:new x}),t.hit.localPoint.copy(o).multiply(h).add(r),t.hit.point.copy(t.hit.localPoint).applyMatrix4(t.worldMatrix),t.hit.distance=t.hit.point.distance(this.origin),s.push(t))}),s.sort((t,e)=>t.hit.distance-e.hit.distance),s}intersectMeshes(t,{cullFace:e=!0,maxDistance:i,includeUV:n=!0,includeNormal:r=!0,output:o=[]}={}){const s=this.intersectBounds(t,{maxDistance:i,output:o});if(!s.length)return s;const a=Lt,h=dt,c=pt,u=mt,d=gt,p=ft,m=vt,g=yt,f=bt,v=lt,y=ct,b=ut;for(let t=s.length-1;t>=0;t--){const o=s[t];let w;a.inverse(o.worldMatrix),i&&(c.copy(this.direction).scaleRotateMatrix4(a),w=i*c.len()),h.copy(this.origin).applyMatrix4(a),c.copy(this.direction).transformDirection(a);let M,L,E,P=0;const _=o.geometry,A=_.attributes,S=A.index,C=Math.max(0,_.drawRange.start),R=Math.min(S?S.count:A.position.count,_.drawRange.start+_.drawRange.count);for(let t=C;t<R;t+=3){const n=S?S.data[t]:t,r=S?S.data[t+1]:t+1,o=S?S.data[t+2]:t+2;u.fromArray(A.position.data,3*n),d.fromArray(A.position.data,3*r),p.fromArray(A.position.data,3*o);const s=this.intersectTriangle(u,d,p,e,h,c,g);s&&(i&&s>w||(!P||s<P)&&(P=s,M=n,L=r,E=o,m.copy(g)))}P||s.splice(t,1),o.hit.localPoint.copy(c).multiply(P).add(h),o.hit.point.copy(o.hit.localPoint).applyMatrix4(o.worldMatrix),o.hit.distance=o.hit.point.distance(this.origin),o.hit.faceNormal||(o.hit.localFaceNormal=new x,o.hit.faceNormal=new x,o.hit.uv=new l,o.hit.localNormal=new x,o.hit.normal=new x),o.hit.localFaceNormal.copy(m),o.hit.faceNormal.copy(o.hit.localFaceNormal).transformDirection(o.worldMatrix),(n||r)&&(u.fromArray(A.position.data,3*M),d.fromArray(A.position.data,3*L),p.fromArray(A.position.data,3*E),this.getBarycoord(o.hit.localPoint,u,d,p,f)),n&&A.uv&&(v.fromArray(A.uv.data,2*M),y.fromArray(A.uv.data,2*L),b.fromArray(A.uv.data,2*E),o.hit.uv.set(v.x*f.x+y.x*f.y+b.x*f.z,v.y*f.x+y.y*f.y+b.y*f.z)),r&&A.normal&&(u.fromArray(A.normal.data,3*M),d.fromArray(A.normal.data,3*L),p.fromArray(A.normal.data,3*E),o.hit.localNormal.set(u.x*f.x+d.x*f.y+p.x*f.z,u.y*f.x+d.y*f.y+p.y*f.z,u.z*f.x+d.z*f.y+p.z*f.z),o.hit.normal.copy(o.hit.localNormal).transformDirection(o.worldMatrix))}return s.sort((t,e)=>t.hit.distance-e.hit.distance),s}intersectSphere(t,e=this.origin,i=this.direction){const n=mt;n.sub(t.center,e);const r=n.dot(i),o=n.dot(n)-r*r,s=t.radius*t.radius;if(o>s)return 0;const a=Math.sqrt(s-o),h=r-a,l=r+a;return h<0&&l<0?0:h<0?l:h}intersectBox(t,e=this.origin,i=this.direction){let n,r,o,s,a,h;const l=1/i.x,c=1/i.y,u=1/i.z,d=t.min,p=t.max;return n=((l>=0?d.x:p.x)-e.x)*l,r=((l>=0?p.x:d.x)-e.x)*l,o=((c>=0?d.y:p.y)-e.y)*c,s=((c>=0?p.y:d.y)-e.y)*c,n>s||o>r?0:(o>n&&(n=o),s<r&&(r=s),a=((u>=0?d.z:p.z)-e.z)*u,h=((u>=0?p.z:d.z)-e.z)*u,n>h||a>r?0:(a>n&&(n=a),h<r&&(r=h),r<0?0:n>=0?n:r))}intersectTriangle(t,e,i,n=!0,r=this.origin,o=this.direction,s=yt){const a=bt,h=xt,l=wt;a.sub(e,t),h.sub(i,t),s.cross(a,h);let c,u=o.dot(s);if(!u)return 0;if(u>0){if(n)return 0;c=1}else c=-1,u=-u;l.sub(r,t);let d=c*o.dot(h.cross(l,h));if(d<0)return 0;let p=c*o.dot(a.cross(l));if(p<0)return 0;if(d+p>u)return 0;let m=-c*l.dot(s);return m<0?0:m/u}getBarycoord(t,e,i,n,r=bt){const o=xt,s=wt,a=Mt;o.sub(n,e),s.sub(i,e),a.sub(t,e);const h=o.dot(o),l=o.dot(s),c=o.dot(a),u=s.dot(s),d=s.dot(a),p=h*u-l*l;if(0===p)return r.set(-2,-1,-1);const m=1/p,g=(u*c-l*d)*m,f=(h*d-l*c)*m;return r.set(1-g-f,f,g)}}var Pt=i(0);const _t=new x;let At=1;class St{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:i=150,dpr:n=1,alpha:r=!1,depth:o=!0,stencil:s=!1,antialias:a=!1,premultipliedAlpha:h=!1,preserveDrawingBuffer:l=!1,powerPreference:c="default",autoClear:u=!0,webgl:d=2}={}){const p={alpha:r,depth:o,stencil:s,antialias:a,premultipliedAlpha:h,preserveDrawingBuffer:l,powerPreference:c};this.dpr=n,this.alpha=r,this.color=!0,this.depth=o,this.stencil=s,this.premultipliedAlpha=h,this.autoClear=u,this.id=At++,2===d&&(this.gl=t.getContext("webgl2",p)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",p)||t.getContext("experimental-webgl",p)),this.gl.renderer=this,this.setSize(e,i),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.gl.viewport(0,0,t,e))}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,i,n){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===i&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=i,this.state.blendFunc.dstAlpha=n,void 0!==i?this.gl.blendFuncSeparate(t,e,i,n):this.gl.blendFunc(t,e))}setBlendEquation(t,e){this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,i){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][i].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:i,sort:n}){let r=[];if(e&&i&&e.updateFrustum(),t.traverse(t=>{if(!t.visible)return!0;t.draw&&(i&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||r.push(t))}),n){const t=[],i=[],n=[];r.forEach(r=>{r.program.transparent?r.program.depthTest?i.push(r):n.push(r):t.push(r),r.zDepth=0,0===r.renderOrder&&r.program.depthTest&&e&&(r.worldMatrix.getTranslation(_t),_t.applyMatrix4(e.projectionViewMatrix),r.zDepth=_t.z)}),t.sort(this.sortOpaque),i.sort(this.sortTransparent),n.sort(this.sortUI),r=t.concat(i,n)}return r}render({scene:t,camera:e,target:i=null,update:n=!0,sort:r=!0,frustumCull:o=!0,clear:s}){null===i?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(i),this.setViewport(i.width,i.height)),(s||this.autoClear&&!1!==s)&&(!this.depth||i&&!i.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:o,sort:r}).forEach(t=>{t.draw({camera:e})})}}class Ct{constructor(t,{width:e,height:i,dpr:n,wrapS:r=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,minFilter:s=t.LINEAR,magFilter:a=t.LINEAR,geometry:h=new ot(t),targetOnly:l=null}={}){this.gl=t,this.options={wrapS:r,wrapT:o,minFilter:s,magFilter:a},this.passes=[],this.geometry=h,this.uniform={value:null},this.targetOnly=l;const c=this.fbo={read:null,write:null,swap:()=>{let t=c.read;c.read=c.write,c.write=t}};this.resize({width:e,height:i,dpr:n})}addPass({vertex:t=Rt,fragment:e=Nt,uniforms:i={},textureUniform:n="tMap",enabled:r=!0}={}){i[n]={value:this.fbo.read.texture};const o=new G(this.gl,{vertex:t,fragment:e,uniforms:i}),s={mesh:new H(this.gl,{geometry:this.geometry,program:o}),program:o,uniforms:i,enabled:r,textureUniform:n};return this.passes.push(s),s}resize({width:t,height:e,dpr:i}={}){i&&(this.dpr=i),t&&(this.width=t,this.height=e||t),i=this.dpr||this.gl.renderer.dpr,t=(this.width||this.gl.renderer.width)*i,e=(this.height||this.gl.renderer.height)*i,this.options.width=t,this.options.height=e,this.fbo.read=new K(this.gl,this.options),this.fbo.write=new K(this.gl,this.options)}render({scene:t,camera:e,target:i=null,update:n=!0,sort:r=!0,frustumCull:o=!0}){const s=this.passes.filter(t=>t.enabled);this.gl.renderer.render({scene:t,camera:e,target:s.length||!i&&this.targetOnly?this.fbo.write:i,update:n,sort:r,frustumCull:o}),this.fbo.swap(),s.forEach((t,e)=>{t.mesh.program.uniforms[t.textureUniform].value=this.fbo.read.texture,this.gl.renderer.render({scene:t.mesh,target:e!==s.length-1||!i&&this.targetOnly?this.fbo.write:i,clear:!0}),this.fbo.swap()}),this.uniform.value=this.fbo.read.texture}}const Rt="\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n",Nt="\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n",Bt=new x,Dt=new x,Ut=new x,Tt=new x,zt=new z,Ot=new z,Ft=new z,jt=new z;class It{constructor(t,e=1){this.data=t,this.elapsed=0,this.weight=e,this.loop=!0,this.duration=t.reduce((t,{times:e})=>Math.max(t,e[e.length-1]),0)}update(t=1,e){const i=e?1:this.weight/t,n=this.loop?this.elapsed%this.duration:Math.min(this.elapsed,this.duration);this.data.forEach(({node:t,transform:e,interpolation:r,times:o,values:s})=>{const a=Math.max(1,o.findIndex(t=>t>n))-1,h=a+1;let l=(n-o[a])/(o[h]-o[a]);"STEP"===r&&(l=0);let c=Bt,u=Dt,d=Ut,p=Tt,m=3;"quaternion"===e&&(c=zt,u=Ot,d=Ft,p=jt,m=4),"CUBICSPLINE"===r?(c.fromArray(s,a*m*3+1*m),u.fromArray(s,a*m*3+2*m),d.fromArray(s,h*m*3+0*m),p.fromArray(s,h*m*3+1*m),c=this.cubicSplineInterpolate(l,c,u,d,p),4===m&&c.normalize()):(c.fromArray(s,a*m),p.fromArray(s,h*m),4===m?c.slerp(p,l):c.lerp(p,l)),4===m?t[e].slerp(c,i):t[e].lerp(c,i)})}cubicSplineInterpolate(t,e,i,n,r){const o=t*t,s=o*t,a=3*o-2*s,h=s-o,l=1-a,c=h-o+t;for(let o=0;o<e.length;o++)e[o]=l*e[o]+c*(1-t)*i[o]+a*r[o]+h*t*n[o];return e}}const Gt=new R;class kt extends H{constructor(t,{skeleton:e,geometry:i,program:n,mode:r=t.TRIANGLES}={}){super(t,{geometry:i,program:n,mode:r}),this.skeleton=e,this.program=n,this.createBoneTexture(),this.animations=[]}createBoneTexture(){if(!this.skeleton.joints.length)return;const t=Math.max(4,Math.pow(2,Math.ceil(Math.log(Math.sqrt(4*this.skeleton.joints.length))/Math.LN2)));this.boneMatrices=new Float32Array(t*t*4),this.boneTextureSize=t,this.boneTexture=new J(this.gl,{image:this.boneMatrices,generateMipmaps:!1,type:this.gl.FLOAT,internalFormat:this.gl.renderer.isWebgl2?this.gl.RGBA16F:this.gl.RGBA,flipY:!1,width:t})}updateUniforms(){this.skeleton.joints.forEach((t,e)=>{Gt.multiply(t.worldMatrix,t.bindInverse),this.boneMatrices.set(Gt,16*e)}),this.boneTexture&&(this.boneTexture.needsUpdate=!0)}draw({camera:t}={}){this.program.uniforms.boneTexture||Object.assign(this.program.uniforms,{boneTexture:{value:this.boneTexture},boneTextureSize:{value:this.boneTextureSize}}),this.updateUniforms();const e=this.worldMatrix;this.skeleton.skeleton&&(this.worldMatrix=this.skeleton.skeleton.worldMatrix),super.draw({camera:t}),this.worldMatrix=e}}function Vt(t){return new G(t,{vertex:"\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n",fragment:"\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n",cullFace:null})}const Xt={5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array,"image/jpeg":Uint8Array,"image/png":Uint8Array},Yt={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},qt={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},Wt={translation:"position",rotation:"quaternion",scale:"scale"};const Ht=-1,Zt=0,$t=1,Qt=2,Jt=3,Kt=new x,te=new l,ee=new l;function ie(t,{element:e=document,enabled:i=!0,target:n=new x,ease:r=.25,inertia:o=.85,enableRotate:s=!0,rotateSpeed:a=.1,autoRotate:h=!1,autoRotateSpeed:c=1,enableZoom:u=!0,zoomSpeed:d=1,enablePan:p=!0,panSpeed:m=.1,minPolarAngle:g=0,maxPolarAngle:f=Math.PI,minAzimuthAngle:v=-1/0,maxAzimuthAngle:y=1/0,minDistance:b=0,maxDistance:w=1/0}={}){this.enabled=i,this.target=n,r=r||1,o=o||0,this.minDistance=b,this.maxDistance=w;const M={radius:1,phi:0,theta:0},L={radius:1,phi:0,theta:0},E={radius:1,phi:0,theta:0},P=new x,_=new x;_.copy(t.position).sub(this.target),E.radius=L.radius=_.distance(),E.theta=L.theta=Math.atan2(_.x,_.z),E.phi=L.phi=Math.acos(Math.min(Math.max(_.y/L.radius,-1),1)),this.update=()=>{h&&function(){const t=2*Math.PI/60/60*c;M.theta-=t}(),L.radius*=M.radius,L.theta+=M.theta,L.phi+=M.phi,L.theta=Math.max(v,Math.min(y,L.theta)),L.phi=Math.max(g,Math.min(f,L.phi)),L.radius=Math.max(this.minDistance,Math.min(this.maxDistance,L.radius)),E.phi+=(L.phi-E.phi)*r,E.theta+=(L.theta-E.theta)*r,E.radius+=(L.radius-E.radius)*r,this.target.add(P);let e=E.radius*Math.sin(Math.max(1e-6,E.phi));_.x=e*Math.sin(E.theta),_.y=E.radius*Math.cos(E.phi),_.z=e*Math.cos(E.theta),t.position.copy(this.target).add(_),t.lookAt(this.target),M.theta*=o,M.phi*=o,P.multiply(o),M.radius=1};const A=new l,S=new l,C=new l;let R=Ht;function N(){return Math.pow(.95,d)}this.mouseButtons={ORBIT:0,ZOOM:1,PAN:2};const B=(i,n)=>{let r=e===document?document.body:e;Kt.copy(t.position).sub(this.target);let o=Kt.distance();o*=Math.tan((t.fov||45)/2*Math.PI/180),function(t,e){Kt.set(e[0],e[1],e[2]),Kt.multiply(-t),P.add(Kt)}(2*i*o/r.clientHeight,t.matrix),function(t,e){Kt.set(e[4],e[5],e[6]),Kt.multiply(t),P.add(Kt)}(2*n*o/r.clientHeight,t.matrix)};function D(t){M.radius/=t}function U(t,i){te.set(t,i),ee.sub(te,A).multiply(a);let n=e===document?document.body:e;M.theta-=2*Math.PI*ee.x/n.clientHeight,M.phi-=2*Math.PI*ee.y/n.clientHeight,A.copy(te)}function T(t,e){te.set(t,e),ee.sub(te,S).multiply(m),B(ee.x,ee.y),S.copy(te)}const z=t=>{if(this.enabled){switch(t.button){case this.mouseButtons.ORBIT:if(!1===s)return;A.set(t.clientX,t.clientY),R=Zt;break;case this.mouseButtons.ZOOM:if(!1===u)return;C.set(t.clientX,t.clientY),R=$t;break;case this.mouseButtons.PAN:if(!1===p)return;S.set(t.clientX,t.clientY),R=Qt}R!==Ht&&(window.addEventListener("mousemove",O,!1),window.addEventListener("mouseup",F,!1))}},O=t=>{if(this.enabled)switch(R){case Zt:if(!1===s)return;U(t.clientX,t.clientY);break;case $t:if(!1===u)return;!function(t){te.set(t.clientX,t.clientY),ee.sub(te,C),ee.y>0?D(N()):ee.y<0&&D(1/N()),C.copy(te)}(t);break;case Qt:if(!1===p)return;T(t.clientX,t.clientY)}},F=()=>{window.removeEventListener("mousemove",O,!1),window.removeEventListener("mouseup",F,!1),R=Ht},j=t=>{this.enabled&&u&&(R===Ht||R===Zt)&&(t.stopPropagation(),t.preventDefault(),t.deltaY<0?D(1/N()):t.deltaY>0&&D(N()))},I=t=>{if(this.enabled)switch(t.preventDefault(),t.touches.length){case 1:if(!1===s)return;A.set(t.touches[0].pageX,t.touches[0].pageY),R=Zt;break;case 2:if(!1===u&&!1===p)return;!function(t){if(u){let e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);C.set(0,n)}if(p){let e=.5*(t.touches[0].pageX+t.touches[1].pageX),i=.5*(t.touches[0].pageY+t.touches[1].pageY);S.set(e,i)}}(t),R=Jt;break;default:R=Ht}},G=t=>{if(this.enabled)switch(t.preventDefault(),t.stopPropagation(),t.touches.length){case 1:if(!1===s)return;U(t.touches[0].pageX,t.touches[0].pageY);break;case 2:if(!1===u&&!1===p)return;!function(t){if(u){let e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);te.set(0,n),ee.set(0,Math.pow(te.y/C.y,d)),D(ee.y),C.copy(te)}if(p){T(.5*(t.touches[0].pageX+t.touches[1].pageX),.5*(t.touches[0].pageY+t.touches[1].pageY))}}(t);break;default:R=Ht}},k=()=>{this.enabled&&(R=Ht)},V=t=>{this.enabled&&t.preventDefault()};this.remove=function(){e.removeEventListener("contextmenu",V),e.removeEventListener("mousedown",z),e.removeEventListener("wheel",j),e.removeEventListener("touchstart",I),e.removeEventListener("touchend",k),e.removeEventListener("touchmove",G),window.removeEventListener("mousemove",O),window.removeEventListener("mouseup",F)},e.addEventListener("contextmenu",V,!1),e.addEventListener("mousedown",z,!1),e.addEventListener("wheel",j,{passive:!1}),e.addEventListener("touchstart",I,{passive:!1}),e.addEventListener("touchend",k,!1),e.addEventListener("touchmove",G,{passive:!1})}function ne(t){return Array.isArray(t)?t.map(t=>"string"==typeof t?new Pt.Color(t):t):"string"==typeof t?new Pt.Color(t):t}function re(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}class oe{constructor({angle:t,direction:e,position:i,blur:n=0,color:r=[1,1,1,1],decay:o=[0,0,1]}={}){this.angle=t,this.blur=n,this.color=r?ne(r):void 0,this.decay=o,this.direction=e,this.position=i,this.position&&this.direction&&null==this.angle&&(this.angle=Math.PI/3)}get type(){if(this.position&&this.direction)return oe.SPOT_LIGHT;if(this.position)return oe.POINT_LIGHT;if(this.direction)return oe.DIRECTIONAL_LIGHT;throw new Error("unknown light")}}re(oe,"DIRECTIONAL_LIGHT",0),re(oe,"POINT_LIGHT",1),re(oe,"SPOT_LIGHT",2);const se=new R,ae=new x,he=new x;class le extends q{constructor(t,{near:e=.1,far:i=100,fov:n=45,aspect:r=1,left:o,right:s,bottom:a,top:h,zoom:l=1}={}){super(),Object.assign(this,{near:e,far:i,fov:n,aspect:r,left:o,right:s,bottom:a,top:h,zoom:l}),this.projectionMatrix=new R,this.viewMatrix=new R,this.projectionViewMatrix=new R,this.worldPosition=new x,this.type=o||s?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:i=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:i,aspect:n}),this.projectionMatrix.fromPerspective({fov:i*(Math.PI/180),aspect:n,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:i=this.left,right:n=this.right,bottom:r=this.bottom,top:o=this.top,zoom:s=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:i,right:n,bottom:r,top:o,zoom:s}),i/=s,n/=s,r/=s,o/=s,this.projectionMatrix.fromOrthogonal({left:i,right:n,bottom:r,top:o,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(se.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new x,new x,new x,new x,new x,new x]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=ae;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const i=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,i)}frustumIntersectsSphere(t,e){const i=he;for(let n=0;n<6;n++){const r=this.frustum[n];if(i.copy(r).dot(t)+r.constant<-e)return!1}return!0}}const ce="\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n",ue="\n    precision highp float;\n\n    vec4 packRGBA (float v) {\n        vec4 pack = fract(vec4(1.0, 255.0, 65025.0, 16581375.0) * v);\n        pack -= pack.yzww * vec2(1.0 / 255.0, 0.0).xxxy;\n        return pack;\n    }\n\n    void main() {\n        gl_FragColor = packRGBA(gl_FragCoord.z);\n    }\n";class de extends class{constructor(t,{light:e=new le(t),width:i=1024,height:n=i}){this.gl=t,this.light=e,this.target=new K(t,{width:i,height:n}),this.depthProgram=new G(t,{vertex:ce,fragment:ue,cullFace:null}),this.castMeshes=[]}add({mesh:t,receive:e=!0,cast:i=!0,vertex:n=ce,fragment:r=ue,uniformProjection:o="shadowProjectionMatrix",uniformView:s="shadowViewMatrix",uniformTexture:a="tShadow"}){e&&!t.program.uniforms[o]&&(t.program.uniforms[o]={value:this.light.projectionMatrix},t.program.uniforms[s]={value:this.light.viewMatrix},t.program.uniforms[a]={value:this.target.texture}),i&&(this.castMeshes.push(t),t.colorProgram=t.program,t.depthProgram||(t.depthProgram=n!==ce||r!==ue?new G(gl,{vertex:n,fragment:r,cullFace:null}):this.depthProgram))}render({scene:t}){t.traverse(t=>{t.draw&&(~this.castMeshes.indexOf(t)?t.program=t.depthProgram:(t.isForceVisibility=t.visible,t.visible=!1))}),this.gl.renderer.render({scene:t,camera:this.light,target:this.target}),t.traverse(t=>{t.draw&&(~this.castMeshes.indexOf(t)?t.program=t.colorProgram:t.visible=t.isForceVisibility)})}}{async add(t,e={}){await t.model,e.mesh=t.body,t.addEventListener("updatemesh",i=>{const n=i.detail.oldMesh;this.castMeshes=this.castMeshes.filter(t=>t!==n),this.add(t,e)}),super.add(e)}remove(t){const e=t.body;if(e){const t=this.castMeshes.indexOf(e);if(t>=0)return this.castMeshes.splice(t,1),!0}return!1}}const pe=Pt.Node.Attr,me=Symbol.for("spritejs_setAttribute"),ge=Symbol.for("spritejs_getAttribute"),fe=Symbol.for("spritejs_setAttributeDefault"),ve=Symbol.for("spritejs_declareAlias");class ye extends pe{constructor(t){super(t),this[fe]({z:0,rotateX:0,rotateY:0,rotateZ:0,rotateOrder:"YXZ",scaleX:1,scaleY:1,scaleZ:1,raycast:void 0,visibility:"visible"}),this[ve]("rotate","scale")}get z(){return this[ge]("z")}set z(t){this[me]("z",t)}get raycast(){return this[ge]("raycast")}set raycast(t){this[me]("raycast",t)}get pos(){return[this.x,this.y,this.z]}set pos(t){Array.isArray(t)||(t=null!=t.x&&null!=t.y&&null!=t.z?[t.x,t.y,t.z]:[t,t,t]),this.x=t[0],this.y=t[1],this.z=t[2]}get rotateX(){return this[ge]("rotateX")}set rotateX(t){this[me]("rotateX",t)}get rotateY(){return this[ge]("rotateY")}set rotateY(t){this[me]("rotateY",t)}get rotateZ(){return this[ge]("rotateZ")}set rotateZ(t){this[me]("rotateZ",t)}get rotate(){return[this.rotateX,this.rotateY,this.rotateZ]}set rotate(t){Array.isArray(t)||(t=[t,0,0]),this.rotateX=t[0],this.rotateY=t[1],this.rotateZ=t[2]}get rotateOrder(){return this[ge]("rotateOrder")}set rotateOrder(t){this[me]("rotateOrder",t)}get scaleX(){return this[ge]("scaleX")}set scaleX(t){this[me]("scaleX",t)}get scaleY(){return this[ge]("scaleY")}set scaleY(t){this[me]("scaleY",t)}get scaleZ(){return this[ge]("scaleZ")}set scaleZ(t){this[me]("scaleZ",t)}get scale(){return[this.scaleX,this.scaleY,this.scaleZ]}set scale(t){Array.isArray(t)||(t=[t,t,t]),this.scaleX=t[0],this.scaleY=t[1],this.scaleZ=t[2]}get visibility(){return this[ge]("visibility")}set visibility(t){if("visible"!==t&&"hidden"!==t)throw new TypeError("Invalid visiblity value.");this[me]("visibility",t)}}const be=Symbol("body"),xe=Symbol.for("spritejs_changedAttrs"),we=Symbol.for("spritejs_setAttribute");function Me({attributes:t},{rotation:e}){return[t[we]("rotateX",180*e.x/Math.PI),t[we]("rotateY",180*e.y/Math.PI),t[we]("rotateZ",180*e.z/Math.PI)].some(t=>t)}class Le extends Pt.Node{get body(){return this[be]?this[be]:null}get isVisible(){return!!this[be]&&this[be].visible}get localMatrix(){return this.matrix}get matrix(){return this[be]?this[be].matrix:null}get mesh(){return this.body.draw?this.body:null}get meshes(){return[]}get modelViewMatrix(){return this[be]?this[be].modelViewMatrix:null}get normalMatrix(){return this[be]?this[be].normalMatrix:null}get renderMatrix(){return this.worldMatrix}get worldMatrix(){return this[be]?this[be].worldMatrix:null}get zDepth(){return this[be]?this[be].zDepth:0}get up(){return this[be]?this[be].up:null}set up(t){return this[be]&&(this[be].up=t),null}connect(t,e){if(super.connect(t,e),this[be]){if(this.camera){if(!t.sublayers)throw new Error("Node3d with camera should only use as sublayers");t.sublayers.push(this)}else{const e=t.groupBody||t.body;e&&e!==this[be]&&(this[be].setParent(e),t.groupBody&&null==t.groupBody.parent&&t.groupBody.setParent(t.body))}this[be]._id=this[be].id,this[be].id=-e}}decompose(){const t=this[be];t&&(t.decompose(),this.resyncState())}disconnect(t){if(super.disconnect(t),this[be]){if(this.camera&&t.sublayers){const e=t.sublayers.indexOf(this);e>=0&&t.sublayers.splice(e,1)}this[be].setParent(null);const e=t.groupBody;e&&e.children&&e.children.length<=0&&e.setParent(null),this[be].id=this[be]._id}}dispose(){this.remove()}lookAt(t,e=!1){const i=this[be];if(i){t instanceof Le&&(t=t.body.position),i.lookAt(t,e);Me(this,i)&&this.forceUpdate()}}onPropertyChange(t,e,i){super.onPropertyChange(t,e,i);const n=this[be];if(n){if("x"!==t&&"y"!==t&&"z"!==t||(n.position[t]=e),"rotateX"===t||"rotateY"===t||"rotateZ"===t){const i=e*Math.PI/180;n.rotation[t.toLowerCase().slice(-1)]=i}"scaleX"!==t&&"scaleY"!==t&&"scaleZ"!==t||(n.scale[t.toLowerCase().slice(-1)]=e),"raycast"===t&&n.geometry&&(n.geometry.raycast=e),"display"===t&&(n.visible="none"!==e&&"visible"===this.attributes.visibility),"visibility"===t&&(n.visible="visible"===e&&"none"!==this.attributes.display),"rotateOrder"===t&&n.rotation.reorder(e),"zIndex"===t&&(n.renderOrder=e)}}resyncState(t=!1){const e=this[be];if(e){const i=this.attributes,n=[Me(this,e),i[we]("scaleX",e.scale.x),i[we]("scaleY",e.scale.y),i[we]("scaleZ",e.scale.z),i[we]("x",e.position.x),i[we]("y",e.position.y),i[we]("z",e.position.z)];t&&n.some(t=>t)&&this.forceUpdate()}}rotate(t,e=[0,1,0]){const i=this[be];if(i){const n=Math.PI*t/180;i.matrix.rotate(n,e),i.matrix.getRotation(i.quaternion),i.rotation.fromQuaternion(i.quaternion);Me(this,i)&&this.forceUpdate()}}setBody(t,e=!0){const i=this[be];if(this[be]=t,i&&(i.setParent(null),delete i._node),this.parent&&this.parent.body&&this[be].setParent(this.parent.body),e){const t=Object.entries(this.attributes[xe]);for(let e=0;e<t.length;e++){const[i,n]=t[e];this.onPropertyChange(i,n,n)}t.length<=0&&this.forceUpdate()}t._node=this,this.groupBody&&this.children&&this.children.length>0&&this.groupBody.setParent(t)}setQuaternion(t){const e=this[be];if(e){Array.isArray(t)||(t=[t.x,t.y,t.z,t.w]),e.quaternion.x=t[0],e.quaternion.y=t[1],e.quaternion.z=t[2],e.quaternion.w=t[3],e.rotation.fromQuaternion(e.quaternion);Me(this,e)&&this.forceUpdate()}}transform(t){const e=this[be];e&&(e.matrix.multiply(t),this.decompose())}traverse(t){this[be]&&this[be].traverse(e=>{e._node&&t(e._node)})}updateMatrix(){this[be]&&(this[be].updateMatrix(),this.forceUpdate())}updateMatrixWorld(t=!1){this[be]&&(this[be].updateMatrixWorld(),this.forceUpdate())}}var Ee,Pe,_e;_e=ye,(Pe="Attr")in(Ee=Le)?Object.defineProperty(Ee,Pe,{value:_e,enumerable:!0,configurable:!0,writable:!0}):Ee[Pe]=_e,Object(Pt.registerNode)(Le,"node3d");const Ae=Symbol("zOrder"),Se=Symbol("children");class Ce extends Le{constructor(t={}){super(t),this.setBody(new q),this[Se]=[],this[Ae]=0}get childNodes(){return this[Se]}get children(){return this[Se]}get meshes(){if("none"===this.attributes.display)return[];const t=this.children,e=[];for(let i=0;i<t.length;i++){const n=t[i];n.meshes&&n.meshes.length&&e.push(...n.meshes)}return e}append(...t){return t.map(t=>this.appendChild(t))}appendChild(t){return t.remove(),this.children.push(t),t.connect(this,this[Ae]++),t}cloneNode(t=!1){const e=super.cloneNode();return t&&this[Se].forEach(i=>{const n=i.cloneNode(t);e.appendChild(n)}),e}getElementById(t){return Pt.Group.prototype.querySelector.call(this,"#"+t)}getElementsByClassName(t){return Pt.Group.prototype.querySelectorAll.call(this,"."+t)}getElementsByName(t){return Pt.Group.prototype.querySelectorAll.call(this,`[name="${t}"]`)}getElementsByTagName(t){return Pt.Group.prototype.querySelectorAll.call(this,t)}insertBefore(t,e){if(null==e)return this.appendChild(t);t.remove();const i=this[Se].indexOf(e);if(i<0)throw new Error("Invalid reference node.");const n=e.zOrder;for(let t=i;t<this[Se].length;t++){const e=this[Se][t].zOrder,i=this[Se][t];delete i.zOrder,Object.defineProperty(i,"zOrder",{value:e+1,writable:!1,configurable:!0})}return this[Se].splice(i,0,t),t.connect(this,n),t}querySelector(t){return Pt.Group.prototype.querySelector.call(this,t)}querySelectorAll(t){return Pt.Group.prototype.querySelectorAll.call(this,t)}replaceChild(t,e){t.remove();const i=this[Se].indexOf(e);if(i<0)throw new Error("Invalid reference node.");return this[Se][i]=t,t.connect(this,e.zOrder),e.disconnect(this),t}removeAllChildren(){const t=this[Se];for(let e=t.length-1;e>=0;e--)t[e].remove()}removeChild(t){const e=this[Se].indexOf(t);return e>=0?(this[Se].splice(e,1),t.disconnect(this),t):null}setResolution({width:t,height:e}){super.setResolution({width:t,height:e}),this[Se].forEach(i=>{i.setResolution({width:t,height:e})})}}Object(Pt.registerNode)(Ce,"group3d");const Re=Symbol.for("spritejs_setAttribute"),Ne=Symbol.for("spritejs_getAttribute"),Be=Symbol.for("spritejs_setAttributeDefault");function De(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}const Ue=Symbol.for("spritejs_setAttribute"),Te=Symbol.for("spritejs_changedAttrs");class ze extends Ce{constructor(t,e={}){let{fov:i=45,near:n=.1,far:r=100,aspect:o=1,left:s,right:a,bottom:h,top:l}=e,c=De(e,["fov","near","far","aspect","left","right","bottom","top"]);super({fov:i,near:n,far:r,aspect:o,left:s,right:a,bottom:h,top:l}),this.groupBody=this.body,this.setBody(new le(t,{fov:i,near:n,far:r,aspect:o,left:s,right:a,bottom:h,top:l}),!1),this.attributes[Ue]("mode",this.body.type),this.gl=t,c&&this.attr(c)}get projectionMatrix(){return this.body.projectionMatrix}get projectionViewMatrix(){return this.body.projectionViewMatrix}get viewMatrix(){return this.body.viewMatrix}get worldPosition(){return this.body.worldPosition}cloneNode(t=!1){const e=this.attributes[Te],i=new this.constructor(this.gl,e);return t&&this.children.forEach(e=>{const n=e.cloneNode(t);i.appendChild(n)}),i}frustumIntersects(t){return!!t.body&&this.body.frustumIntersectsMesh(t.body)}frustumIntersectsSphere(t,e){return t instanceof Le&&t.body&&(t=t.body.position),this.body.frustumIntersectsSphere(t,e)}lookAt(t){return super.lookAt(t,!0),this}onPropertyChange(t,e,i){super.onPropertyChange(t,e,i);const n=this.body;if(n&&n.perspective){const i=this.attributes.mode;if("perspective"===i&&("near"===t||"far"===t||"fov"===t||"aspect"===t)){const i="fov"===t?e*(Math.PI/180):e;n.perspective({[t]:i})}if("orthographic"!==i||"left"!==t&&"right"!==t&&"bottom"!==t&&"top"!==t&&"zoom"!==t||n.orthographic({[t]:e}),"mode"===t)if("perspective"===e)n.perspective();else{const{left:t,right:e,bottom:i,top:r}=this.attributes;n.orthographic({left:t,right:e,bottom:i,top:r})}}}project(t){return this.body.project(t),this}unproject(t){return this.body.unproject(t),this}updateFrustum(){return this.body.updateFrustum(),this}}function Oe(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}function Fe(t,e=3){let i=t.data||t;Array.isArray(i)&&(i=new Float32Array(i));const n=t.size||e;return t.data?(t.data=i,t.size=n,t):{size:n,data:i}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(ze,"Attr",class extends ye{constructor(t){super(t),this[Be]({near:.1,far:100,fov:45,aspect:1,left:void 0,right:void 0,bottom:void 0,top:void 0,zoom:1,mode:"perspective"})}get near(){return this[Ne]("near")}set near(t){this[Re]("near",t)}get far(){return this[Ne]("far")}set far(t){this[Re]("far",t)}get fov(){return this[Ne]("fov")}set fov(t){this[Re]("fov",t)}get aspect(){return this[Ne]("aspect")}set aspect(t){this[Re]("aspect",t)}get left(){return this[Ne]("left")}set left(t){this[Re]("left",t)}get right(){return this[Ne]("right")}set right(t){this[Re]("right",t)}get top(){return this[Ne]("top")}set top(t){this[Re]("top",t)}get bottom(){return this[Ne]("bottom")}set bottom(t){this[Re]("bottom",t)}get zoom(){return this[Ne]("zoom")}set zoom(t){this[Re]("zoom",t)}get mode(){return this[Ne]("mode")}set mode(t){if(t&&"perspective"!==t&&"orthographic"!==t)throw new TypeError("Invalid camera mode.");this[Re]("mode",t)}}),Object(Pt.registerNode)(ze,"camera"),rt.prototype.transpose=function(t="zxy"){const e=this;if(e){t=[...t].map(t=>"x"===t||"X"===t?0:"y"===t||"Y"===t?1:2);const i=e.attributes.position,{size:n,data:r}=i;for(let e=0;e<r.length;e+=n){const i=[r[e],r[e+1],r[e+2]];for(let n=0;n<3;n++){const o=null!=t[n]?t[n]:n;r[e+n]=i[o]}}i.needsUpdate=!0}};class je extends rt{static extract({gl:t,attributes:e,preserveBuffers:i}){if(e.index){const n=e.index.data,r={};return Object.entries(e).forEach(([t,e])=>{const i=e.data;if("index"!==t){r[t]=new i.constructor(e.size*n.length);for(let o=0;o<n.length;o++)for(let s=0;s<e.size;s++)r[t][o*e.size+s]=i[n[o]*e.size+s]}}),new je(t,r,i)}const n={};return Object.entries(e).forEach(([t,e])=>{const i=e.data;n[t]=new i.constructor(i)}),new je(t,n,i)}static createTB(t){const{position:e,index:i,uv:n}=t.attributes;if(!n)throw new Error("NO uv.");function r(t,e,i,n,r,o){const s=(new x).sub(e,t),a=(new x).sub(i,t),h=(new l).sub(r,n),c=(new l).sub(o,n),u=new x,d=new x,p=1/(h.x*c.y-c.x*h.y);return u.x=p*(c.y*s.x-h.y*a.x),u.y=p*(c.y*s.y-h.y*a.y),u.z=p*(c.y*s.z-h.y*a.z),u.normalize(),d.x=p*(-c.x*s.x+h.x*a.x),d.y=p*(-c.x*s.y+h.x*a.y),d.z=p*(-c.x*s.z+h.x*a.z),d.normalize(),{tang:u,bitang:d}}const o=e.size;if(o<3)throw new Error("Error dimension.");const s=e.data.length/o,a=new Float32Array(3*s),h=new Float32Array(3*s),c=i?i.data.length:s;for(let t=0;t<c;t+=3){const s=i?i.data[t]:t,l=i?i.data[t+1]:t+1,c=i?i.data[t+2]:t+2,u=[e.data[s*o],e.data[s*o+1],e.data[s*o+2]],d=[e.data[l*o],e.data[l*o+1],e.data[l*o+2]],p=[e.data[c*o],e.data[c*o+1],e.data[c*o+2]],m=[n.data[2*s],n.data[2*s+1]],g=[n.data[2*l],n.data[2*l+1]],f=[n.data[2*c],n.data[2*c+1]],{tang:v,bitang:y}=r(u,d,p,m,g,f);a.set(v,3*s),a.set(v,3*l),a.set(v,3*c),h.set(y,3*s),h.set(y,3*l),h.set(y,3*c)}return t.addAttribute("tang",{data:a,size:3}),t.addAttribute("bitang",{data:h,size:3}),t}constructor(t,e,i=!0){const{position:n,uv:r,normal:o,index:s}=e,a=Oe(e,["position","uv","normal","index"]),h={};if(n&&(h.position=Fe(n)),r&&(h.uv=Fe(r,2)),o&&(h.normal=Fe(o)),s){let t=s.data||s;Array.isArray(t)&&(t=new Uint16Array(t)),h.index={data:t}}if(a){let t;const e=h.position;e&&(t=e.data.length/e.size),Object.entries(a).forEach(([e,i])=>{let n=3;if(!i.size){const e=i.data?i.data.length:i.length;e&&t&&(n=e/t)}h[e]=Fe(i,n)})}super(t,h),this.preserveBuffers=i}}const Ie=Symbol.for("spritejs_setAttribute"),Ge=Symbol.for("spritejs_getAttribute"),ke=Symbol.for("spritejs_setAttributeDefault");class Ve extends ye{constructor(t){super(t),this[ke]({mode:"TRIANGLES",colors:[.5,.5,.5,1],colorDivisor:3,raycast:"box"})}get colors(){return this[Ge]("colors")}set colors(t){if("string"==typeof t){let e=(t=t.replace(/\s*,\s*/g,",")).split(/\s+/g);e=e.map(t=>new Pt.Color(t)),t=e.reduce((t,e)=>[...t,...e])}else Array.isArray(t)&&("string"==typeof t[0]?t=t.reduce((t,e)=>(t.push(...new Pt.Color(e)),t),[]):Array.isArray(t[0])&&(t=t.reduce((t,e)=>[...t,...e])));this[Ie]("colors",t)}get colorDivisor(){return this[Ge]("colorDivisor")}set colorDivisor(t){this[Ie]("colorDivisor",t)}get mode(){return this[Ge]("mode")}set mode(t){if("number"==typeof t&&t>=0&&t<7&&(t=["POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"][t]),t&&"TRIANGLES"!==t&&"POINTS"!==t&&"LINES"!==t&&"LINE_LOOP"!==t&&"LINE_STRIP"!==t&&"TRIANGLE_STRIP"!==t&&"TRIANGLE_FAN"!==t)throw new TypeError("Invalid mode value.");this[Ie]("mode",t)}get raycast(){return this[Ge]("raycast")}set raycast(t){this[Ie]("raycast",t)}}function Xe(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Ye(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Xe(Object(i),!0).forEach((function(e){We(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Xe(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function qe(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}function We(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}const He=Symbol.for("spritejs_changedAttrs"),Ze=Symbol("program"),$e=Symbol("geometry"),Qe=Symbol("model"),Je=Symbol("beforeRender"),Ke=Symbol("afterRender"),ti=Symbol("updateMeshPromise");function ei(t,e,i){const n=[t[0]-e[0],t[1]-e[1],t[2]-e[2]],r=[e[0]-i[0],e[1]-i[1],e[2]-i[2]];return function(t){const e=Math.hypot(...t);return[t[0]/e,t[1]/e,t[2]/e]}([n[1]*r[2]-n[2]*r[1],n[0]*r[2]-n[2]*r[0],n[0]*r[1]-n[1]*r[0]])}class ii extends Ce{static fromMesh(t){const e=t.program,i=t.geometry,n=t.geometry.attributes,r=new ii(e);r[$e]=i,r[Qe]=n,r.setBody(t);let o=r.getListeners("beforerender");return o.length&&t.onBeforeRender(r[Je]),o=r.getListeners("afterrender"),o.length&&t.onAfterRender(r[Ke]),r}constructor(t,e={}){let{model:i}=e,n=qe(e,["model"]);if(!t||t instanceof G||(n=t,t=n.program),!t)throw new Error("No program specified!");super(n),this.groupBody=this.body,this.setProgram(t),this[Je]=t=>{this.dispatchEvent({type:"beforerender",detail:t})},this[Ke]=t=>{this.dispatchEvent({type:"afterrender",detail:t})},i&&"function"==typeof i.then?this[Qe]=i.then(t=>{this[Qe]=t,this.remesh()}):i?this.setGeometry(i):this.remesh()}get geometry(){return this[$e]}get meshes(){const t=super.meshes;return this.body.geometry&&"none"!==this.attributes.display&&t.unshift(this.body),t}get model(){return this[Qe]}get program(){return this[Ze]}get uniforms(){if("function"==typeof Proxy){const t=this[Ze],e=this;if(t)return new Proxy(t.uniforms,{get(t,e){if(e in t)return t[e].value},set(t,i,n){i in t?t[i].value=ne(n):t[i]={value:ne(n)},e.forceUpdate()}});throw new Error("no program specified")}return null}_createMesh({geometry:t,mode:e,program:i}){return new H(i.gl,{geometry:t,mode:e,program:i})}addEventListener(t,e,i={}){if(super.addEventListener(t,e,i),this.body.onBeforeRender&&"beforerender"===t){1===this.getListeners("beforerender").length&&this.body.onBeforeRender(this[Je])}else if(this.body.onAfterRender&&"afterrender"===t){1===this.getListeners("afterrender").length&&this.body.onAfterRender(this[Ke])}return this}cloneNode(t=!1){const e=this.attributes[He],i=this[$e].preserveBuffers?this[$e]:this[Qe],n=new this.constructor(this[Ze],Ye(Ye({},e),{},{model:i}));return t&&this.children.forEach(e=>{const i=e.cloneNode(t);n.appendChild(i)}),n}dispose(){const t=this.children;for(let e=t.length-1;e>=0;e--)t[e].dispose();const e=this[$e];e&&!e.preserveBuffers&&(e.remove(),delete this[$e]),super.dispose()}onPropertyChange(t,e,i){if(super.onPropertyChange(t,e,i),("colors"===t||"colorDivisor"===t)&&e!==i){const t=this.program;if(t&&t.extraAttribute.color){const e=this.geometry;e&&t.extraAttribute.color(this,e)}}if("mode"===t){const t=this.program;t&&(this.body.mode=t.gl[e])}}remesh(){this.setGeometry()}removeAllListeners(t,e={}){if(super.removeAllListeners(t,e),this.body.onBeforeRender&&"beforerender"===t){const t=this.body.beforeRenderCallbacks.indexOf(this[Je]);t>=0&&this.body.beforeRenderCallbacks.splice(t,1)}else if(this.body.onAfterRender&&"afterrender"===t){const t=this.body.afterRenderCallbacks.indexOf(this[Ke]);t>=0&&this.body.afterRenderCallbacks.splice(t,1)}return this}removeEventListener(t,e,i={}){if(super.removeEventListener(t,e,i),this.body.onBeforeRender&&"beforerender"===t){if(0===this.getListeners("beforerender").length){const t=this.body.beforeRenderCallbacks.indexOf(this[Je]);t>=0&&this.body.beforeRenderCallbacks.splice(t,1)}}else if(this.body.onAfterRender&&"afterrender"===t){if(0===this.getListeners("afterrender").length){const t=this.body.afterRenderCallbacks.indexOf(this[Ke]);t>=0&&this.body.afterRenderCallbacks.splice(t,1)}}return this}setGeometry(t=this[Qe]){if(!t)return;const e=this[Ze],i=e.gl;let n;if(n=t instanceof rt?t:new je(i,t,!1),!n.attributes.normal&&e.gl.getAttribLocation(e.program,"normal")>=0){const t=n.attributes.position.data,e=n.attributes.position.data.length,i=new Float32Array(e);if(e%9==0)for(let n=0;n<e;n+=9){const e=ei([t[n],t[n+1],t[n+2]],[t[n+3],t[n+4],t[n+5]],[t[n+6],t[n+7],t[n+8]]);i.set([...e,...e,...e],n)}else if(e%3==0)for(let t=0;t<e;t+=3)i.set([-1,0,0],t);n.addAttribute("normal",{size:3,data:i})}const r=e.extraAttribute;r&&Object.entries(r).forEach(([t,e])=>{n.attributes[t]||n.addAttribute(t,e(this,n))}),n.raycast=this.attributes.raycast;const o=this[$e];o&&o!==n&&!o.preserveBuffers&&o.remove(),this[$e]=n,this[Qe]=t;const s=this.attributes.mode,a=this._createMesh({mode:i[s],geometry:n,program:e});this.setBody(a);let h=this.getListeners("beforerender");h.length&&a.onBeforeRender(this[Je]),h=this.getListeners("afterrender"),h.length&&a.onAfterRender(this[Ke])}setResolution({width:t,height:e}){super.setResolution({width:t,height:e});const i=this.program;if(i&&i.uniforms.uResolution&&(i.uniforms.uResolution={value:[t,e]}),i&&i.uniforms.uDPR){const t=this.layer?this.layer.displayRatio:1;i.uniforms.uDPR={value:t}}}setProgram(t){this[Ze]=t;const e=t.gl,i=this[$e];if(i){const n=this.attributes.mode,r=this._createMesh({mode:e[n],geometry:i,program:t});this.setBody(r)}}transpose(t="zxy"){const e=this[$e];e&&(e.transpose(t),this.forceUpdate())}updateMesh(){this.program&&(this[ti]||(this[ti]=Promise.resolve().then(()=>{delete this[ti];const t=this.mesh;this.remesh();const e=this.mesh;this.dispatchEvent({type:"updatemesh",detail:{oldMesh:t,newMesh:e}})})))}}function ni(t,e){const i=e.attributes.color,n=e.attributes.position.data,r=e.attributes.position.size||3,o=n.length/r,s=i?i.data:new Float32Array(4*o),a=t.attributes.colors,h=a.length/4,l=t.attributes.colorDivisor;for(let t=0;t<o;t++){const e=Math.floor(t/l)%h;s[4*t]=a[4*e],s[4*t+1]=a[4*e+1],s[4*t+2]=a[4*e+2],s[4*t+3]=a[4*e+3]}return i&&(i.needsUpdate=!0),{size:4,data:s}}function ri(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}function oi(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function si(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?oi(Object(i),!0).forEach((function(e){ai(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):oi(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function ai(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}We(ii,"Attr",Ve),Object(Pt.registerNode)(ii,"mesh3d");const hi={depth:!0,alpha:!0},li=Symbol("orbit_checker"),ci=Symbol("orbit_checking"),ui=Symbol("utime"),di=Symbol("shadow"),pi=Symbol("directionalLight"),mi=Symbol("directionLightColor"),gi=Symbol("pointLightPosition"),fi=Symbol("pointLightColor"),vi=Symbol("pointLightDecay"),yi=Symbol("ambientColor"),bi=Symbol("spotLightPosition"),xi=Symbol("spotLightColor"),wi=Symbol("spotLightDirection"),Mi=Symbol("spotLightAngle"),Li=Symbol("spotLightDecay"),Ei=Symbol("spotLightBlur"),Pi=Symbol("targets"),_i=Symbol("post"),Ai=Symbol("renderOptions"),Si=Symbol("root"),Ci=Symbol("camera"),Ri=Symbol("sublayers"),Ni=Symbol("orbit");class Bi extends Pt.Layer{constructor(t={}){if("2d"===t.contextType)throw new TypeError("Cannot create 3d layer in 2d context.");t.Renderer||((t=Object.assign({},hi,t)).Renderer=function(t,e){e=Object.assign({},e);const i=new St(si({canvas:t},e));return i.globalTransformMatrix=[1,0,0,1,0,0],i.setGlobalTransform=function(t){},i}),super(t),this[ui]=[],this[Pi]=[],this.updateLights(t,!1),this[Ai]={update:!0,sort:!0,frustumCull:!0,clear:void 0};const e=this.renderer.gl;if(t.post&&("boolean"==typeof t.post&&(t.post={}),this[_i]=new Ct(e,t.post)),t.camera){const i=new ze(e,t.camera);i.connect(this,0),this[Ci]=i}else this[Ci]={body:null};this[Si]=new Ce,this[Si].connect(this,0),this[Ri]=[],this[Ni]=!1}get ambientColor(){return this[yi]||[1,1,1,1]}set ambientColor(t){this[yi]=ne(t),this.traverse(({program:t})=>{t&&(t.uniforms.ambientColor.value=this[yi])}),this.forceUpdate()}get body(){return this[Si]?this[Si].body:null}get camera(){return this[Ci]&&this[Ci].body?this[Ci]:null}get gl(){return this.renderer.gl}get meshes(){const t=this.children,e=[];for(let i=0;i<t.length;i++){const n=t[i];n.meshes&&n.meshes.length&&e.push(...n.meshes)}return e}get post(){return this[_i]}get renderOptions(){return this[Ai]}get root(){return this[Si]}get shadow(){return this[di]}get sublayers(){return this[Ri]}get autoClear(){return this.renderer.autoClear}set autoClear(t){this.renderer.autoClear=t}bindTarget(t,e={}){this[Pi].push({target:t,options:e})}bindTime(t,e={}){this.unbindTime(t),t.timeline=this.timeline.fork(e),this[ui].push(t),this.forceUpdate()}createProgram(t={},{attributes:e,uniforms:i}={}){let{attributes:n,texture:r,normalMap:o,bumpMap:s,uniforms:a}=t,h=ri(t,["attributes","texture","normalMap","bumpMap","uniforms"]);const l=this.renderer.gl;a&&(h.uniforms=si({},a));const c=new G(l,h);if(e&&(c.extraAttribute=Object.assign({},n,e)),c.uniforms.ambientColor={},c.uniforms.directionalLight={value:new Float32Array(24)},c.uniforms.directionalLightColor={value:new Float32Array(32)},c.uniforms.pointLightPosition={value:new Float32Array(48)},c.uniforms.pointLightColor={value:new Float32Array(64)},c.uniforms.pointLightDecay={value:new Float32Array(48)},c.uniforms.spotLightPosition={value:new Float32Array(48)},c.uniforms.spotLightDirection={value:new Float32Array(48)},c.uniforms.spotLightColor={value:new Float32Array(64)},c.uniforms.spotLightDecay={value:new Float32Array(48)},c.uniforms.spotLightAngle={value:new Float32Array(16)},c.uniforms.spotLightBlur={value:new Float32Array(16)},this.setLights(c),r&&(c.uniforms.tMap={value:r}),o&&(c.uniforms.tNormal={value:o}),s&&(c.uniforms.tBump={value:s}),l.getUniformLocation(c.program,"uShadow")&&!c.uniforms.uShadow&&(c.uniforms.uShadow={value:.5}),l.getUniformLocation(c.program,"uResolution")&&!c.uniforms.uResolution){const{width:t,height:e}=this.getResolution();c.uniforms.uResolution={value:[t,e]}}if(l.getUniformLocation(c.program,"uDPR")&&!c.uniforms.uDPR){const t=this.layer?this.layer.displayRatio:1;c.uniforms.uDPR={value:t}}return l.getUniformLocation(c.program,"uNormalScale")&&!c.uniforms.uNormalScale&&(c.uniforms.uNormalScale={value:1}),l.getUniformLocation(c.program,"uNormalUVScale")&&!c.uniforms.uNormalUVScale&&(c.uniforms.uNormalUVScale={value:1}),l.getUniformLocation(c.program,"specularFocus")&&!c.uniforms.specularFocus&&(c.uniforms.specularFocus={value:.5}),l.getUniformLocation(c.program,"specularIntensity")&&!c.uniforms.specularIntensity&&(c.uniforms.specularIntensity={value:0}),c.extraAttribute=c.extraAttribute||{},l.getAttribLocation(c.program,"color")>=0&&!c.extraAttribute.color&&(c.extraAttribute.color=ni),i&&Object.assign(c.uniforms,i),c}createSublayer(t={}){let{camera:e=null}=t,i=ri(t,["camera"]);!e&&this.camera&&(e=this.camera.cloneNode());const n=new Ce(i);return n.camera=e,n}createText(t,{font:e="16px Helvetica,Arial,sans-serif",fillColor:i,strokeColor:n,strokeWidth:r=1}={}){const o=Pt.ENV.createText(t,{font:e,fillColor:i,strokeColor:n,strokeWidth:r}).image;return this.createTexture({image:o,generateMipmaps:!1,width:o.width,height:o.height})}createTexture(t={}){const e=this.renderer.gl;let i;function n(t){return"string"==typeof t||Array.isArray(t)&&"string"==typeof t[0]}n(t)?(i=t,t={}):n(t.image)?(i=t.image,delete(t=si({},t)).image):Array.isArray(t)&&(t={image:t});const r=new J(e,t);if(i){let t;return t=Array.isArray(i)?this.loadImages(i):this.loadImage(i),t.then(t=>{r.image=t,this.forceUpdate()}),r.loaded=t,r}return r.loaded=Promise.resolve(),r}createShadow({width:t=this.canvas.width,height:e=this.canvas.height,light:i=this[Ci]}={}){const n=this.renderer.gl;return new de(n,{width:t,height:e,light:i.body})}dispatchPointerEvent(t){let e;const i=this.raycast;let n=!1;if(i){const r=this.renderer;e=new l,e.set(t.x/r.width*2-1,2*(1-t.y/r.height)-1),n=function(e,i,n){e.castMouse(i.camera.body,n);const r=e.intersectBounds(i.meshes.filter(t=>"none"!==t.geometry.raycast));if(r&&r.length){let e;for(let t=0;t<r.length;t++){const i=r[t]._node,n=i.attributes.pointerEvents;if("none"!==n&&(i.isVisible||"all"===n)){e=i;break}}if(e)return t.mouse=n,t.hit=e.body.hit,e.dispatchEvent(t),!0}}(i,this,e)}return n||Pt.Block.prototype.dispatchPointerEvent.call(this,t)}async loadGLTF(t){const e=this.renderer.gl,i=await class{static async load(t,e){const i=e.split("/").slice(0,-1).join("/")+"/",n=await this.parseDesc(e);return await this.parse(t,n,i)}static async parse(t,e,i){(void 0===e.asset||e.asset.version[0]<2)&&console.warn("Only GLTF >=2.0 supported. Attempting to parse.");const n=await this.loadBuffers(e,i);t.renderer.bindVertexArray(null);const r=this.parseBufferViews(t,e,n),o=this.parseImages(t,e,i,r),s=this.parseTextures(t,e,o),a=this.parseMaterials(t,e,s),h=this.parseSkins(t,e,r),l=this.parseMeshes(t,e,r,a,h),c=this.parseNodes(t,e,l,h);this.populateSkins(h,c);const u=this.parseAnimations(t,e,c,r),d=this.parseScenes(e,c),p=d[e.scene];for(let t=c.length;t>=0;t--)c[t]||c.splice(t,1);return{json:e,buffers:n,bufferViews:r,images:o,textures:s,materials:a,meshes:l,nodes:c,animations:u,scenes:d,scene:p}}static async parseDesc(t){return t.match(/\.glb$/)?await fetch(t).then(t=>t.arrayBuffer()).then(t=>this.unpackGLB(t)):await fetch(t).then(t=>t.json())}static unpackGLB(t){const e=new Uint32Array(t,0,3);if(1179937895!==e[0])throw new Error("Invalid glTF asset.");if(2!==e[1])throw new Error(`Unsupported glTF binary version, "${e[1]}".`);const i=new Uint32Array(t,12,2),n=i[0];if(1313821514!==i[1])throw new Error("Unexpected GLB layout.");const r=(new TextDecoder).decode(t.slice(20,20+n)),o=JSON.parse(r);if(20+n===t.byteLength)return o;const s=new Uint32Array(t,20+n,2);if(5130562!==s[1])throw new Error("Unexpected GLB layout.");const a=20+n+8,h=s[0],l=t.slice(a,a+h);return o.buffers[0].binary=l,o}static resolveURI(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}static async loadBuffers(t,e){return t.buffers?await Promise.all(t.buffers.map(t=>{if(t.binary)return t.binary;const i=this.resolveURI(t.uri,e);return fetch(i).then(t=>t.arrayBuffer())})):null}static parseBufferViews(t,e,i){if(!e.bufferViews)return null;const n=e.bufferViews.map(t=>Object.assign({},t));return e.meshes&&e.meshes.forEach(({primitives:i})=>{i.forEach(({attributes:i,indices:r})=>{for(let t in i)n[e.accessors[i[t]].bufferView].isAttribute=!0;void 0!==r&&(n[e.accessors[r].bufferView].isAttribute=!0,n[e.accessors[r].bufferView].target=t.ELEMENT_ARRAY_BUFFER)})}),e.accessors.forEach(({bufferView:t,componentType:e})=>{n[t].componentType=e}),e.images&&e.images.forEach(({uri:t,bufferView:e,mimeType:i})=>{void 0!==e&&(n[e].mimeType=i)}),n.forEach(({buffer:e,byteOffset:r=0,byteLength:o,byteStride:s,target:a=t.ARRAY_BUFFER,name:h,extensions:l,extras:c,componentType:u,mimeType:d,isAttribute:p},m)=>{const g=Xt[u||d],f=g.BYTES_PER_ELEMENT,v=new g(i[e],r,o/f);if(n[m].data=v,!p)return;const y=t.createBuffer();t.bindBuffer(a,y),t.renderer.state.boundBuffer=y,t.bufferData(a,v,t.STATIC_DRAW),n[m].buffer=y}),n}static parseImages(t,e,i,n){return e.images?e.images.map(({uri:t,bufferView:e,mimeType:r,name:o})=>{const s=new Image;if(s.name=o,t)s.src=this.resolveURI(t,i);else if(void 0!==e){const{data:t}=n[e],i=new Blob([t],{type:r});s.src=URL.createObjectURL(i)}return s.ready=new Promise(t=>{s.onload=()=>t()}),s}):null}static parseTextures(t,e,i){return e.textures?e.textures.map(({sampler:n,source:r,name:o,extensions:s,extras:a})=>{const h={flipY:!1,wrapS:t.REPEAT,wrapT:t.REPEAT},l=void 0!==n?e.samplers[n]:null;l&&["magFilter","minFilter","wrapS","wrapT"].forEach(t=>{l[t]&&(h[t]=l[t])});const c=new J(t,h);c.name=o;const u=i[r];return u.ready.then(()=>c.image=u),c}):null}static parseMaterials(t,e,i){return e.materials?e.materials.map(({name:t,extensions:e,extras:n,pbrMetallicRoughness:r={},normalTexture:o,occlusionTexture:s,emissiveTexture:a,emissiveFactor:h=[0,0,0],alphaMode:l="OPAQUE",alphaCutoff:c=.5,doubleSided:u=!1})=>{const{baseColorFactor:d=[1,1,1,1],baseColorTexture:p,metallicFactor:m=1,roughnessFactor:g=1,metallicRoughnessTexture:f}=r;return p&&(p.texture=i[p.index]),o&&(o.texture=i[o.index]),f&&(f.texture=i[f.index]),s&&(s.texture=i[s.index]),a&&(a.texture=i[a.index]),{name:t,baseColorFactor:d,baseColorTexture:p,metallicFactor:m,roughnessFactor:g,metallicRoughnessTexture:f,normalTexture:o,occlusionTexture:s,emissiveTexture:a,emissiveFactor:h,alphaMode:l,alphaCutoff:c,doubleSided:u}}):null}static parseSkins(t,e,i){return e.skins?e.skins.map(({inverseBindMatrices:t,skeleton:n,joints:r})=>({inverseBindMatrices:this.parseAccessor(t,e,i),skeleton:n,joints:r})):null}static parseMeshes(t,e,i,n,r){return e.meshes?e.meshes.map(({primitives:o,weights:s,name:a,extensions:h,extras:l},c)=>{let u=0,d=!1;return e.nodes&&e.nodes.forEach(({mesh:t,skin:e})=>{t===c&&(u++,void 0!==e&&(d=e))}),{primitives:o=this.parsePrimitives(t,o,e,i,n,u).map(({geometry:e,program:i,mode:n})=>{const o="number"==typeof d?new kt(t,{skeleton:r[d],geometry:e,program:i,mode:n}):new H(t,{geometry:e,program:i,mode:n});return o.name=a,o.geometry.isInstanced&&(o.numInstances=u,o.frustumCulled=!1),o}),weights:s,name:a}}):null}static parsePrimitives(t,e,i,n,r,o){return e.map(({attributes:e,indices:s,material:a,mode:h=4,targets:l,extensions:c,extras:u})=>{const d=new rt(t);for(let t in e)d.addAttribute(qt[t],this.parseAccessor(e[t],i,n));void 0!==s&&d.addAttribute("index",this.parseAccessor(s,i,n)),o>1&&d.addAttribute("instanceMatrix",{instanced:1,size:16,data:new Float32Array(16*o)});const p=new Vt(t);return void 0!==a&&(p.gltfMaterial=r[a]),{geometry:d,program:p,mode:h}})}static parseAccessor(t,e,i){const{bufferView:n,byteOffset:r=0,componentType:o,normalized:s=!1,count:a,type:h,min:l,max:c,sparse:u}=e.accessors[t],{data:d,buffer:p,byteStride:m=0,target:g}=i[n];return{data:d,size:Yt[h],type:o,normalized:s,buffer:p,stride:m,offset:r,count:a,min:l,max:c}}static parseNodes(t,e,i,n){if(!e.nodes)return null;const r=e.nodes.map(({camera:t,children:e,skin:n,matrix:r,mesh:o,rotation:s,scale:a,translation:h,weights:l,name:c,extensions:u,extras:d})=>{const p=new q;c&&(p.name=c),r?(p.matrix.copy(r),p.decompose()):(s&&p.quaternion.copy(s),a&&p.scale.copy(a),h&&p.position.copy(h),p.updateMatrix());let m=!1,g=!0;if(void 0!==o&&i[o].primitives.forEach(t=>{t.geometry.isInstanced&&(m=!0,t.instanceCount?g=!1:t.instanceCount=0,p.matrix.toArray(t.geometry.attributes.instanceMatrix.data,16*t.instanceCount),t.instanceCount++,t.instanceCount===t.numInstances&&(delete t.numInstances,delete t.instanceCount,t.geometry.attributes.instanceMatrix.needsUpdate=!0)),m?g&&t.setParent(p):t.setParent(p)}),m){if(!g)return null;p.matrix.identity(),p.decompose()}return p});return e.nodes.forEach(({children:t=[]},e)=>{t.forEach(t=>{r[t]&&r[t].setParent(r[e])})}),r}static populateSkins(t,e){t&&t.forEach(t=>{t.joints=t.joints.map((i,n)=>{const r=e[i];return r.bindInverse=new R(...t.inverseBindMatrices.data.slice(16*n,16*(n+1))),r}),t.skeleton&&(t.skeleton=e[t.skeleton])})}static parseAnimations(t,e,i,n){return e.animations?e.animations.map(({channels:t,samplers:r,name:o})=>{const s=t.map(({sampler:t,target:o})=>{const{input:s,interpolation:a="LINEAR",output:h}=r[t],{node:l,path:c}=o,u=i[l],d=Wt[c],p=this.parseAccessor(s,e,n),m=p.data.slice(p.offset/4,p.offset/4+p.count*p.size),g=this.parseAccessor(h,e,n);return{node:u,transform:d,interpolation:a,times:m,values:g.data.slice(g.offset/4,g.offset/4+g.count*g.size)}});return{name:o,animation:new It(s)}}):null}static parseScenes(t,e){return t.scenes?t.scenes.map(({nodes:t=[],name:i,extensions:n,extras:r})=>t.reduce((t,i)=>(e[i]&&t.push(e[i]),t),[])):null}}.load(e,t);return i.scene.forEach(t=>{t.traverse(t=>{let e;t instanceof H?e=ii.fromMesh(t):(e=new Ce,e.setBody(t,!1));const i=e.body.parent;if(i){i._node.appendChild(e)}}),this.appendChild(t._node)}),i}async loadImage(t){return await Pt.ENV.loadImage(t)}async loadImages(t){return await Promise.all(t.map(t=>Pt.ENV.loadImage(t,{useImageBitmap:!1})))}async loadModel(t){return await(await fetch(t)).json()}async loadShader({vertex:t,fragment:e}){const i=await Promise.all([t&&(await fetch(t)).text(),e&&(await fetch(e)).text()]);return{vertex:i[0],fragment:i[1]}}removeOrbit(t=this[Ci]){t.orbit&&(t.orbit.remove(),delete t.orbit)}render({clear:t=!0}={}){const e=this[Si],i=this[Ci];this.renderer.autoClear=t,this._prepareRenderFinished(),this.dispatchEvent({type:"beforerender",detail:{camera:i.body}}),this[Pi].length&&this[Pi].forEach(({target:t,options:e})=>{t.renderBy(this,e)}),i.orbit&&(i.orbit.update(),i.resyncState()),this[di]&&this[di].render({scene:e.body}),this[Ri].length&&this[Ri].forEach((t,e)=>{const i=t.camera;i.orbit&&(i.orbit.update(),i.resyncState()),this.renderer.render(si({scene:t.body,camera:i.body},this[Ai])),0===e&&(this.renderer.autoClear=!1)}),this[_i]?this[_i].render(si({scene:e.body,camera:i.body},this[Ai])):this.renderer.render(si({scene:e.body,camera:i.body},this[Ai])),this[ui].length&&(this[ui].forEach(t=>{t.uniforms.uTime.value=.001*t.timeline.currentTime}),this.forceUpdate()),this.dispatchEvent({type:"afterrender",detail:{camera:i.body}})}renderTarget(t,e={}){return t.renderBy(this,e)}renderTo(t,e={}){const i=Object.assign(e,this[Ai]),n=this[Si],r=this[Ci];return this.renderer.render(si({scene:n.body,camera:r.body,target:t},i))}addLight(...t){t.forEach(t=>{this.lights=this.lights||[],this.lights.push(t)}),this.updateLights()}removeLight(...t){this.lights&&(t.forEach(t=>{const e=this.lights.indexOf(t);e>=0&&this.lights.splice(e,1)}),this.updateLights())}updateLights({directionalLight:t=this[pi],directionalLightColor:e=this[mi],pointLightPosition:i=this[gi],pointLightColor:n=this[fi],pointLightDecay:r=this[vi],ambientColor:o=this[yi],spotLightAngle:s=this[Mi],spotLightBlur:a=this[Ei],spotLightColor:h=this[xi],spotLightDecay:l=this[Li],spotLightDirection:c=this[wi],spotLightPosition:u=this[bi]}={},d=!0){function p(t){return t&&null!=t[0]&&!Array.isArray(t[0])?[t]:t}this[yi]=ne(o),this[pi]=p(t),this[mi]=p(ne(e)),this[gi]=p(i),this[fi]=p(ne(n)),this[vi]="number"==typeof r?[[r,0,1]]:p(r),this[Mi]="number"==typeof s?[s]:s,this[Ei]="number"==typeof a?[a]:a,this[xi]=p(ne(h)),this[wi]=p(c),this[bi]=p(u),this[Li]="number"==typeof l?[[l,0,1]]:p(l),d&&this.traverse(({program:t})=>{t&&this.setLights(t)})}setLights(t,{directionalLight:e=this[pi],directionalLightColor:i=this[mi],pointLightPosition:n=this[gi],pointLightColor:r=this[fi],pointLightDecay:o=this[vi],ambientColor:s=this[yi],spotLightAngle:a=this[Mi],spotLightBlur:h=this[Ei],spotLightColor:l=this[xi],spotLightDecay:c=this[Li],spotLightDirection:u=this[wi],spotLightPosition:d=this[bi]}={}){function p({value:t},e){let i=0;e.forEach(e=>{Array.isArray(e)?t.set(e,i):t[i]=e,i+=e.length?e.length:1})}const m=this.lights;if(m){e=e?[...e]:[],i=i?[...i]:[],n=n?[...n]:[],r=r?[...r]:[],o=o?[...o]:[],a=a?[...a]:[],h=h?[...h]:[],l=l?[...l]:[],c=c?[...c]:[],u=u?[...u]:[],d=d?[...d]:[];for(let t=m.length-1;t>=0;t--){const s=m[t];if(s.type===oe.DIRECTIONAL_LIGHT){const{direction:t,color:n}=s;e.unshift(t),i.unshift(n)}else if(s.type===oe.POINT_LIGHT){const{position:t,color:e,decay:i}=s;n.unshift(t),r.unshift(e),o.unshift(i)}else if(s.type===oe.SPOT_LIGHT){const{position:t,color:e,decay:i,direction:n,angle:r,blur:o}=s;a.unshift(r),h.unshift(o),l.unshift(e),c.unshift(i),u.unshift(n),d.unshift(t)}}}t.uniforms.ambientColor.value=s||[1,1,1,1],t.uniforms.directionalLight.value.fill(0),t.uniforms.directionalLightColor.value.fill(0),t.uniforms.pointLightPosition.value.fill(0),t.uniforms.pointLightColor.value.fill(0),t.uniforms.pointLightDecay.value.fill(0),t.uniforms.spotLightPosition.value.fill(0),t.uniforms.spotLightDirection.value.fill(0),t.uniforms.spotLightColor.value.fill(0),t.uniforms.spotLightDecay.value.fill(0),t.uniforms.spotLightAngle.value.fill(0),t.uniforms.spotLightBlur.value.fill(0),e&&e.length&&p(t.uniforms.directionalLight,e),i&&i.length&&p(t.uniforms.directionalLightColor,i),n&&n.length&&p(t.uniforms.pointLightPosition,n),r&&r.length&&p(t.uniforms.pointLightColor,r),o&&o.length&&p(t.uniforms.pointLightDecay,o),a&&a.length&&p(t.uniforms.spotLightAngle,a),h&&h.length&&p(t.uniforms.spotLightBlur,h),l&&l.length&&p(t.uniforms.spotLightColor,l),c&&c.length&&p(t.uniforms.spotLightDecay,c),u&&u.length&&p(t.uniforms.spotLightDirection,u),d&&d.length&&p(t.uniforms.spotLightPosition,d),this.forceUpdate()}setOrbit(t={}){if(this[li]||(this[li]=[()=>{this[ci]=!0},()=>{this[ci]=!1},()=>{this[ci]&&this.forceUpdate()},()=>{this.forceUpdate()}]),null==t)return this[Ci]&&this.removeOrbit(),this[Ri].length&&this[Ri].forEach(({camera:t})=>{t&&this.removeOrbit(t)}),this[Ni]&&(this[Ni]=0,this.removeEventListener("mousedown",this[li][0]),this.removeEventListener("mouseup",this[li][1]),this.removeEventListener("mousemove",this[li][2]),this.removeEventListener("touchstart",this[li][3]),this.removeEventListener("touchend",this[li][3]),this.removeEventListener("touchmove",this[li][3]),this.removeEventListener("wheel",this[li][3],!1)),null;const e=t.camera||this[Ci],i=t.target||[0,0,0];t.target=new x(...i),t.element=t.element||this.parent.container;const n=new ie(e.body,t);return e.orbit=n,this[Ni]||(this.addEventListener("mousedown",this[li][0]),this.addEventListener("mouseup",this[li][1]),this.addEventListener("mousemove",this[li][2]),this.addEventListener("touchstart",this[li][3]),this.addEventListener("touchend",this[li][3]),this.addEventListener("touchmove",this[li][3]),this.addEventListener("wheel",this[li][3],!1)),this[Ni]++,n}setRaycast(t=!0){if(t){const t=this.renderer.gl;this.raycast=new Et(t)}else delete this.raycast}setRenderOptions(t){Object.assign(this[Ai],t)}setResolution({width:t,height:e}){const{width:i,height:n}=this.getResolution();if(super.setResolution({width:t,height:e}),i!==t||n!==e){const i=this.displayRatio,n=this.renderer;this.renderer.dpr=i,n.width=t/i,n.height=e/i;const r=n.gl;r.canvas.width=t,r.canvas.height=e;const o=this.camera;o&&!1!==this.options.camera.preserveAspect&&(o.attributes.aspect=t/e),this[Ri]&&this[Ri].length&&this[Ri].forEach(({camera:i})=>{i&&!1!==this.options.camera.preserveAspect&&(i.attributes.aspect=t/e)}),this[_i]&&this[_i].resize()}}setShadow(t){this[di]=t,this.forceUpdate()}setUniforms(t,e=this.uniforms||{}){t instanceof G||(e=t||{},t=null),super.setUniforms(e),t&&Object.entries(e).forEach(([e,i])=>{i&&i.value?t.uniforms[e]=i:t.uniforms[e]?t.uniforms[e].value=i:t.uniforms[e]={value:i}}),this.forceUpdate()}traverse(t){return this[Si].traverse(t)}unbindTime(t){const e=this[ui].indexOf(t);return e>=0&&(this[ui].splice(e,1),!0)}unbindTarget(t){const e=this[Pi].indexOf(t);return e>=0&&(this[Pi].splice(e,1),!0)}}Pt.Scene.prototype.layer3d=function(t="default3d",e={}){const{displayRatio:i}=this.options;(e=Object.assign({dpr:i},this.options,e)).id=t;const n=this.orderedChildren;for(let e=0;e<n.length;e++)if(n[e].id===t)return n[e];const r=new Bi(e);return this.appendChild(r),r},Object(Pt.registerNode)(Bi,"layer3d");const Di=new x,Ui=new z,Ti=new x,zi=new x,Oi=new z,Fi=new x;class ji{constructor({objects:t,data:e}){this.objects=t,this.data=e,this.elapsed=0,this.weight=1,this.duration=e.frames.length-1}update(t=1,e){const i=e?1:this.weight/t,n=this.elapsed%this.duration,r=Math.floor(n),o=n-r,s=this.data.frames[r],a=this.data.frames[(r+1)%this.duration];this.objects.forEach((t,e)=>{Di.fromArray(s.position,3*e),Ui.fromArray(s.quaternion,4*e),Ti.fromArray(s.scale,3*e),zi.fromArray(a.position,3*e),Oi.fromArray(a.quaternion,4*e),Fi.fromArray(a.scale,3*e),Di.lerp(zi,o),Ui.slerp(Oi,o),Ti.lerp(Fi,o),t.position.lerp(Di,i),t.quaternion.slerp(Ui,i),t.scale.lerp(Ti,i)})}}const Ii=new R;class Gi extends H{constructor(t,{rig:e,geometry:i,program:n,mode:r=t.TRIANGLES}={}){super(t,{geometry:i,program:n,mode:r}),this.createBones(e),this.createBoneTexture(),this.animations=[],Object.assign(this.program.uniforms,{boneTexture:{value:this.boneTexture},boneTextureSize:{value:this.boneTextureSize}})}createBones(t){if(this.root=new q,this.bones=[],t.bones&&t.bones.length){for(let e=0;e<t.bones.length;e++){const i=new q;i.position.fromArray(t.bindPose.position,3*e),i.quaternion.fromArray(t.bindPose.quaternion,4*e),i.scale.fromArray(t.bindPose.scale,3*e),this.bones.push(i)}t.bones.forEach((t,e)=>{if(this.bones[e].name=t.name,-1===t.parent)return this.bones[e].setParent(this.root);this.bones[e].setParent(this.bones[t.parent])}),this.root.updateMatrixWorld(!0),this.bones.forEach(t=>{t.bindInverse=new R(...t.worldMatrix).inverse()})}}createBoneTexture(){if(!this.bones.length)return;const t=Math.max(4,Math.pow(2,Math.ceil(Math.log(Math.sqrt(4*this.bones.length))/Math.LN2)));this.boneMatrices=new Float32Array(t*t*4),this.boneTextureSize=t,this.boneTexture=new J(this.gl,{image:this.boneMatrices,generateMipmaps:!1,type:this.gl.FLOAT,internalFormat:this.gl.renderer.isWebgl2?this.gl.RGBA16F:this.gl.RGBA,flipY:!1,width:t})}addAnimation(t){const e=new ji({objects:this.bones,data:t});return this.animations.push(e),e}update(){let t=0;this.animations.forEach(e=>t+=e.weight),this.animations.forEach((e,i)=>{e.update(t,0===i)})}draw({camera:t}={}){this.root.updateMatrixWorld(!0),this.bones.forEach((t,e)=>{Ii.multiply(t.worldMatrix,t.bindInverse),this.boneMatrices.set(Ii,16*e)}),this.boneTexture&&(this.boneTexture.needsUpdate=!0),super.draw({camera:t})}}function ki(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function Vi(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function Xi(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}const Yi=Symbol("rig"),qi=[];function Wi(t,e){const i=t.addAnimation(e.data),n=t._node,r=e.elapsed||0;return r&&(i.elapsed=r,t.update(),n.forceUpdate()),Object.defineProperties(e,{animation:{get:()=>i,enumerable:!0},elapsed:{get:()=>i.elapsed,set(e){i.elapsed=e,t.update(),n.forceUpdate()},enumerable:!0}}),e}class Hi extends ii{constructor(t,e={}){let{model:i}=e;super(t,function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?ki(Object(i),!0).forEach((function(e){Vi(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ki(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({model:i},Xi(e,["model"]))),this[qi]=[]}get bones(){return this[Yi]?this[Yi].bones:null}_createMesh({geometry:t,program:e}){const i=this[Yi];return new Gi(e.gl,{rig:i,geometry:t,program:e})}addAnimation(t){const e={data:t},i=this.body;return i.addAnimation&&Wi(i,e),this[qi].push(e),e}setGeometry(t=this.model){const e=t.rig;this[Yi]=e,delete t.rig,super.setGeometry(t),t.rig=e,t!==this.geometry&&(this.geometry.rig=e),this[qi].forEach(t=>{t.animation||Wi(this.body,t)})}}Object(Pt.registerNode)(Hi,"skin");class Zi extends rt{constructor(t,{radius:e=.5,widthSegments:i=16,heightSegments:n=Math.ceil(.5*i),phiStart:r=0,phiLength:o=2*Math.PI,thetaStart:s=0,thetaLength:a=Math.PI,attributes:h={}}={}){const l=i,c=n,u=r,d=o,p=s,m=a,g=(l+1)*(c+1),f=l*c*6,v=new Float32Array(3*g),y=new Float32Array(3*g),b=new Float32Array(2*g),w=g>65536?new Uint32Array(f):new Uint16Array(f);let M=0,L=0,E=0,P=p+m;const _=[];let A=new x;for(let t=0;t<=c;t++){let i=[],n=t/c;for(let t=0;t<=l;t++,M++){let r=t/l,o=-e*Math.cos(u+r*d)*Math.sin(p+n*m),s=e*Math.cos(p+n*m),a=e*Math.sin(u+r*d)*Math.sin(p+n*m);v[3*M]=o,v[3*M+1]=s,v[3*M+2]=a,A.set(o,s,a).normalize(),y[3*M]=A.x,y[3*M+1]=A.y,y[3*M+2]=A.z,b[2*M]=r,b[2*M+1]=1-n,i.push(L++)}_.push(i)}for(let t=0;t<c;t++)for(let e=0;e<l;e++){let i=_[t][e+1],n=_[t][e],r=_[t+1][e],o=_[t+1][e+1];(0!==t||p>0)&&(w[3*E]=i,w[3*E+1]=n,w[3*E+2]=o,E++),(t!==c-1||P<Math.PI)&&(w[3*E]=n,w[3*E+1]=r,w[3*E+2]=o,E++)}Object.assign(h,{position:{size:3,data:v},normal:{size:3,data:y},uv:{size:2,data:b},index:{data:w}}),super(t,h)}}const $i=Symbol.for("spritejs_setAttribute"),Qi=Symbol.for("spritejs_getAttribute"),Ji=Symbol.for("spritejs_setAttributeDefault");class Ki extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"radius"!==t&&"widthSegments"!==t&&"heightSegments"!==t&&"phiStart"!==t&&"phiLength"!==t&&"thetaStart"!==t&&"thetaLength"!==t||e!==i&&this.updateMesh()}remesh(){const t=this.program.gl,{radius:e,widthSegments:i,heightSegments:n,phiStart:r,phiLength:o,thetaStart:s,thetaLength:a}=this.attributes,h=new Zi(t,{radius:e,widthSegments:i,heightSegments:n,phiStart:r,phiLength:o,thetaStart:s,thetaLength:a});this.setGeometry(h)}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(Ki,"Attr",class extends Ve{constructor(t){super(t),this[Ji]({radius:.5,widthSegments:32,heightSegments:16,phiStart:0,phiLength:2*Math.PI,thetaStart:0,thetaLength:Math.PI,raycast:"sphere"})}get radius(){return this[Qi]("radius")}set radius(t){this[$i]("radius",t)}get widthSegments(){return this[Qi]("widthSegments")}set widthSegments(t){this[$i]("widthSegments",t)}get heightSegments(){return this[Qi]("heightSegments")}set heightSegments(t){this[$i]("heightSegments",t)}get phiStart(){return this[Qi]("phiStart")}set phiStart(t){this[$i]("phiStart",t)}get phiLength(){return this[Qi]("phiLength")}set phiLength(t){this[$i]("phiLength",t)}get thetaStart(){return this[Qi]("thetaStart")}set thetaStart(t){this[$i]("thetaStart",t)}get thetaLength(){return this[Qi]("thetaLength")}set thetaLength(t){this[$i]("thetaLength",t)}}),Object(Pt.registerNode)(Ki,"sphere");class tn extends rt{constructor(t,{radius:e=.5,tube:i=.2,radialSegments:n=8,tubularSegments:r=6,arc:o=2*Math.PI,attributes:s={}}={}){const a=(n+1)*(r+1),h=n*r*6,l=new Float32Array(3*a),c=new Float32Array(3*a),u=new Float32Array(2*a),d=a>65536?new Uint32Array(h):new Uint16Array(h),p=new x,m=new x,g=new x;let f=0;for(let t=0;t<=n;t++)for(let s=0;s<=r;s++,f++){const a=s/r*o,h=t/n*Math.PI*2;m.x=(e+i*Math.cos(h))*Math.cos(a),m.y=(e+i*Math.cos(h))*Math.sin(a),m.z=i*Math.sin(h),l.set([m.x,m.y,m.z],3*f),p.x=e*Math.cos(a),p.y=e*Math.sin(a),g.sub(m,p).normalize(),c.set([g.x,g.y,g.z],3*f),u.set([s/r,t/n],2*f)}f=0;for(let t=1;t<=n;t++)for(let e=1;e<=r;e++,f++){const i=(r+1)*t+e-1,n=(r+1)*(t-1)+e-1,o=(r+1)*(t-1)+e,s=(r+1)*t+e;d.set([i,n,s,n,o,s],6*f)}Object.assign(s,{position:{size:3,data:l},normal:{size:3,data:c},uv:{size:2,data:u},index:{data:d}}),super(t,s)}}const en=Symbol.for("spritejs_setAttribute"),nn=Symbol.for("spritejs_getAttribute"),rn=Symbol.for("spritejs_setAttributeDefault");class on extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"radius"!==t&&"tube"!==t&&"radialSegments"!==t&&"tubularSegments"!==t&&"arc"!==t||e!==i&&this.updateMesh()}remesh(){const t=this.program.gl,{radius:e,tube:i,radialSegments:n,tubularSegments:r,arc:o}=this.attributes,s=new tn(t,{radius:e,tube:i,radialSegments:n,tubularSegments:r,arc:o});this.setGeometry(s)}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(on,"Attr",class extends Ve{constructor(t){super(t),this[rn]({radius:.5,tube:.2,radialSegments:8,tubularSegments:6,arc:2*Math.PI})}get radius(){return this[nn]("radius")}set radius(t){this[en]("radius",t)}get tube(){return this[nn]("tube")}set tube(t){this[en]("tube",t)}get radialSegments(){return this[nn]("radialSegments")}set radialSegments(t){this[en]("radialSegments",t)}get tubularSegments(){return this[nn]("tubularSegments")}set tubularSegments(t){this[en]("tubularSegments",t)}get arc(){return this[nn]("arc")}set arc(t){this[en]("arc",t)}}),Object(Pt.registerNode)(on,"torus");class sn extends rt{constructor(t,{width:e=1,height:i=1,widthSegments:n=1,heightSegments:r=1,attributes:o={}}={}){const s=n,a=r,h=(s+1)*(a+1),l=s*a*6,c=new Float32Array(3*h),u=new Float32Array(3*h),d=new Float32Array(2*h),p=h>65536?new Uint32Array(l):new Uint16Array(l);sn.buildPlane(c,u,d,p,e,i,0,s,a),Object.assign(o,{position:{size:3,data:c},normal:{size:3,data:u},uv:{size:2,data:d},index:{data:p}}),super(t,o)}static buildPlane(t,e,i,n,r,o,s,a,h,l=0,c=1,u=2,d=1,p=-1,m=0,g=0){const f=m,v=r/a,y=o/h;for(let b=0;b<=h;b++){let x=b*y-o/2;for(let o=0;o<=a;o++,m++){let y=o*v-r/2;if(t[3*m+l]=y*d,t[3*m+c]=x*p,t[3*m+u]=s/2,e[3*m+l]=0,e[3*m+c]=0,e[3*m+u]=s>=0?1:-1,i[2*m]=o/a,i[2*m+1]=1-b/h,b===h||o===a)continue;let w=f+o+b*(a+1),M=f+o+(b+1)*(a+1),L=f+o+(b+1)*(a+1)+1,E=f+o+b*(a+1)+1;n[6*g]=w,n[6*g+1]=M,n[6*g+2]=E,n[6*g+3]=M,n[6*g+4]=L,n[6*g+5]=E,g++}}}}class an extends rt{constructor(t,{width:e=1,height:i=1,depth:n=1,widthSegments:r=1,heightSegments:o=1,depthSegments:s=1,attributes:a={}}={}){const h=r,l=o,c=s,u=(h+1)*(l+1)*2+(h+1)*(c+1)*2+(l+1)*(c+1)*2,d=6*(h*l*2+h*c*2+l*c*2),p=new Float32Array(3*u),m=new Float32Array(3*u),g=new Float32Array(2*u),f=u>65536?new Uint32Array(d):new Uint16Array(d);let v=0,y=0;sn.buildPlane(p,m,g,f,n,i,e,c,l,2,1,0,-1,-1,v,y),sn.buildPlane(p,m,g,f,n,i,-e,c,l,2,1,0,1,-1,v+=(c+1)*(l+1),y+=c*l),sn.buildPlane(p,m,g,f,e,n,i,c,l,0,2,1,1,1,v+=(c+1)*(l+1),y+=c*l),sn.buildPlane(p,m,g,f,e,n,-i,c,l,0,2,1,1,-1,v+=(h+1)*(c+1),y+=h*c),sn.buildPlane(p,m,g,f,e,i,-n,h,l,0,1,2,-1,-1,v+=(h+1)*(c+1),y+=h*c),sn.buildPlane(p,m,g,f,e,i,n,h,l,0,1,2,1,-1,v+=(h+1)*(l+1),y+=h*l),Object.assign(a,{position:{size:3,data:p},normal:{size:3,data:m},uv:{size:2,data:g},index:{data:f}}),super(t,a)}}const hn=Symbol.for("spritejs_setAttribute"),ln=Symbol.for("spritejs_getAttribute"),cn=Symbol.for("spritejs_setAttributeDefault");class un extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"width"!==t&&"height"!==t&&"depth"!==t&&"widthSegments"!==t&&"heightSegments"!==t&&"depthSegments"!==t||e!==i&&this.updateMesh()}remesh(){const t=this.program.gl,{width:e,height:i,depth:n,widthSegments:r,heightSegments:o,depthSegments:s}=this.attributes,a=new an(t,{width:e,height:i,depth:n,widthSegments:r,heightSegments:o,depthSegments:s});this.setGeometry(a)}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(un,"Attr",class extends Ve{constructor(t){super(t),this[cn]({width:1,height:1,depth:1,widthSegments:1,heightSegments:1,depthSegments:1,colorDivisor:4})}get width(){return this[ln]("width")}set width(t){this[hn]("width",t)}get height(){return this[ln]("height")}set height(t){this[hn]("height",t)}get size(){return[this.width,this.height,this.depth]}set size(t){Array.isArray(t)||(t=[t,t,t]),this.width=t[0],this.height=t[1],this.depth=t[2]}get depth(){return this[ln]("depth")}set depth(t){this[hn]("depth",t)}get widthSegments(){return this[ln]("widthSegments")}set widthSegments(t){this[hn]("widthSegments",t)}get heightSegments(){return this[ln]("heightSegments")}set heightSegments(t){this[hn]("heightSegments",t)}get depthSegments(){return this[ln]("depthSegments")}set depthSegments(t){this[hn]("depthSegments",t)}}),Object(Pt.registerNode)(un,"cube");const dn=new x,pn=new x,mn=new x,gn=new x;function fn(t,e,i,n){const r=1-t;dn.copy(e).scale(r**2),pn.copy(i).scale(2*r*t),mn.copy(n).scale(t**2);const o=new x;return o.add(dn,pn).add(mn),o}function vn(t,e,i,n,r){const o=1-t;dn.copy(e).scale(o**3),pn.copy(i).scale(3*o**2*t),mn.copy(n).scale(3*o*t**2),gn.copy(r).scale(t**3);const s=new x;return s.add(dn,pn).add(mn).add(gn),s}class yn{constructor({points:t=[new x(0,0,0),new x(0,1,0),new x(1,1,0),new x(1,0,0)],divisions:e=12,type:i="catmullrom"}={}){this.points=t,this.divisions=e,this.type=i}_getQuadraticBezierPoints(t=this.divisions){const e=[],i=this.points.length;if(i<3)return console.warn("Not enough points provided."),[];const n=this.points[0];let r=this.points[1],o=this.points[2];for(let i=0;i<=t;i++){const s=fn(i/t,n,r,o);e.push(s)}let s=3;for(;i-s>0;){n.copy(o),r=o.scale(2).sub(r),o=this.points[s];for(let i=1;i<=t;i++){const s=fn(i/t,n,r,o);e.push(s)}s++}return e}_getCubicBezierPoints(t=this.divisions){const e=[],i=this.points.length;if(i<4)return console.warn("Not enough points provided."),[];let n=this.points[0],r=this.points[1],o=this.points[2],s=this.points[3];for(let i=0;i<=t;i++){const a=vn(i/t,n,r,o,s);e.push(a)}let a=4;for(;i-a>1;){n.copy(s),r=s.scale(2).sub(o),o=this.points[a],s=this.points[a+1];for(let i=1;i<=t;i++){const a=vn(i/t,n,r,o,s);e.push(a)}a+=2}return e}_getCatmullRomPoints(t=this.divisions,e=.168,i=.168){const n=[];if(this.points.length<=2)return this.points;let r;return this.points.forEach((o,s)=>{if(0===s)r=o;else{const[a,h]=function(t,e,i=.168,n=.168){if(e<1?dn.sub(t[1],t[0]).scale(i).add(t[0]):dn.sub(t[e+1],t[e-1]).scale(i).add(t[e]),e>t.length-3){const e=t.length-1;pn.sub(t[e-1],t[e]).scale(n).add(t[e])}else pn.sub(t[e],t[e+2]).scale(n).add(t[e+1]);return[dn.clone(),pn.clone()]}(this.points,s-1,e,i),l=new yn({points:[r,a,h,o],type:"cubicbezier"});n.pop(),n.push(...l.getPoints(t)),r=o}}),n}getPoints(t=this.divisions,e=.168,i=.168){const n=this.type;return"quadraticbezier"===n?this._getQuadraticBezierPoints(t):"cubicbezier"===n?this._getCubicBezierPoints(t):"catmullrom"===n?this._getCatmullRomPoints(t,e,i):this.points}}yn.CATMULLROM="catmullrom",yn.CUBICBEZIER="cubicbezier",yn.QUADRATICBEZIER="quadraticbezier";class bn extends yn{constructor({points:t,divisions:e,type:i}={}){!Array.isArray(t)||!t[0]||t[0]instanceof x||(t=t.map(t=>(new x).copy(t))),super({points:t,divisions:e,type:i})}}const xn=Symbol.for("spritejs_setAttribute"),wn=Symbol.for("spritejs_getAttribute"),Mn=Symbol.for("spritejs_setAttributeDefault");class Ln extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"width"!==t&&"height"!==t&&"widthSegments"!==t&&"heightSegments"!==t||e!==i&&this.updateMesh()}remesh(){const t=this.program.gl,{width:e,height:i,widthSegments:n,heightSegments:r}=this.attributes,o=new sn(t,{width:e,height:i,widthSegments:n,heightSegments:r});this.setGeometry(o)}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(Ln,"Attr",class extends Ve{constructor(t){super(t),this[Mn]({width:1,height:1,widthSegments:1,heightSegments:1})}get width(){return this[wn]("width")}set width(t){this[xn]("width",t)}get height(){return this[wn]("height")}set height(t){this[xn]("height",t)}get widthSegments(){return this[wn]("widthSegments")}set widthSegments(t){this[xn]("widthSegments",t)}get heightSegments(){return this[wn]("heightSegments")}set heightSegments(t){this[xn]("heightSegments",t)}}),Object(Pt.registerNode)(Ln,"plane");const En=Symbol.for("spritejs_setAttribute"),Pn=Symbol.for("spritejs_getAttribute"),_n=Symbol.for("spritejs_setAttributeDefault");class An extends ii{setProgram(t){t.uniforms.uThickness||(t.uniforms.uThickness={value:1}),t.uniforms.uMiter||(t.uniforms.uMiter={value:1}),t.gl.getUniformLocation(t.program,"uTotalLength")&&!t.uniforms.uTotalLength&&(t.uniforms.uTotalLength={value:0}),super.setProgram(t)}get points(){return this.attributes.points}onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"points"===t&&e!==i&&(e.length===i.length?this.updateGeometry():this.updateMesh())}updateGeometry(){const t=this.attributes.points,e=this.geometry.attributes.position.data,i=this.geometry.attributes.prev.data,n=this.geometry.attributes.next.data,r=this.geometry.attributes.seg?this.geometry.attributes.seg.data:null;let o=0;for(let s=0;s<t.length;s+=3){const a=[t[s],t[s+1],t[s+2]];if(e.set(a,2*s),e.set(a,2*s+3),r&&(0===s?r.set([0,0],0):(o+=Math.hypot(t[s]-t[s-3],t[s+1]-t[s-2],t[s+2]-t[s-1]),r.set([o,o],s/3*2))),0===s){const e=[t[s]-t[s+3]+t[s],t[s+1]-t[s+4]+t[s+1],t[s+2]-t[s+5]+t[s+2]];i.set(e,2*s),i.set(e,2*s+3)}else n.set(a,2*(s-3)),n.set(a,2*(s-3)+3);if(s>=t.length-3){const e=[t[s]-t[s-3]+t[s],t[s+1]-t[s-2]+t[s+1],t[s+2]-t[s-1]+t[s+2]];n.set(e,2*s),n.set(e,2*s+3)}else i.set(a,2*(s+3)),i.set(a,2*(s+3)+3)}this.program&&this.program.uniforms.uTotalLength&&(this.program.uniforms.uTotalLength={value:o}),this.geometry.attributes.position.needsUpdate=!0,this.geometry.attributes.prev.needsUpdate=!0,this.geometry.attributes.next.needsUpdate=!0,r&&(this.geometry.attributes.seg.needsUpdate=!0)}remesh(){const t=this.attributes.points.length/3,e=new Float32Array(3*t*2),i=new Float32Array(3*t*2),n=new Float32Array(3*t*2),r=new Float32Array(2*t),o=new Float32Array(2*t*2),s=new Uint16Array(3*(t-1)*2),a={position:e,prev:i,next:n,side:r,uv:o,index:s},h=this.program;if(h&&h.gl.getAttribLocation(h.program,"seg")>=0){const e=new Float32Array(2*t);a.seg=e}for(let e=0;e<t;e++){r.set([-1,1],2*e);const i=e/(t-1);if(o.set([0,i,1,i],4*e),e===t-1)continue;const n=2*e;s.set([n+0,n+1,n+2],3*(n+0)),s.set([n+2,n+1,n+3],3*(n+1))}this.setGeometry(a),this.updateGeometry()}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(An,"Attr",class extends Ve{constructor(t){super(t),this[_n]({points:[],raycast:"none"})}get points(){return this[Pn]("points")}set points(t){Array.isArray(t)&&(t=t.reduce((t,e)=>Array.isArray(e)?[...t,...e]:[...t,e],[])),this[En]("points",t)}}),Object(Pt.registerNode)(An,"polyline3d");class Sn extends rt{constructor(t,{radiusTop:e=.5,radiusBottom:i=.5,height:n=1,radialSegments:r=8,heightSegments:o=1,openEnded:s=!1,thetaStart:a=0,thetaLength:h=2*Math.PI,attributes:l={}}={}){const c=r,u=o,d=a,p=h,m=s?0:i&&e?2:1,g=(c+1)*(u+1+m)+m,f=c*u*6+m*c*3,v=new Float32Array(3*g),y=new Float32Array(3*g),b=new Float32Array(2*g),w=g>65536?new Uint32Array(f):new Uint16Array(f);let M=0,L=0;const E=[];function P(t){let r;const o=!0===t?e:i,s=!0===t?1:-1,a=M;for(v.set([0,.5*n*s,0],3*M),y.set([0,s,0],3*M),b.set([.5,.5],2*M),M++,r=0;r<=c;r++){const t=r/c*p+d,e=Math.cos(t),i=Math.sin(t);v.set([o*i,.5*n*s,o*e],3*M),y.set([0,s,0],3*M),b.set([.5*e+.5,.5*i*s+.5],2*M),M++}for(r=0;r<c;r++){const e=a+r+1;t?w.set([e,e+1,a],3*L):w.set([e+1,e,a],3*L),L++}}!function(){let t,r;const o=new x,s=(i-e)/n;for(r=0;r<=u;r++){const a=[],h=r/u,l=h*(i-e)+e;for(t=0;t<=c;t++){const e=t/c,i=e*p+d,r=Math.sin(i),u=Math.cos(i);v.set([l*r,(.5-h)*n,l*u],3*M),o.set(r,s,u).normalize(),y.set([o.x,o.y,o.z],3*M),b.set([e,1-h],2*M),a.push(M++)}E.push(a)}for(t=0;t<c;t++)for(r=0;r<u;r++){const e=E[r][t],i=E[r+1][t],n=E[r+1][t+1],o=E[r][t+1];w.set([e,i,o,i,n,o],3*L),L+=2}}(),s||(e&&P(!0),i&&P(!1)),Object.assign(l,{position:{size:3,data:v},normal:{size:3,data:y},uv:{size:2,data:b},index:{data:w}}),super(t,l)}}const Cn=Symbol.for("spritejs_setAttribute"),Rn=Symbol.for("spritejs_getAttribute"),Nn=Symbol.for("spritejs_setAttributeDefault");class Bn extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"radiusTop"!==t&&"radiusBottom"!==t&&"height"!==t&&"radialSegments"!==t&&"heightSegments"!==t&&"openEnded"!==t&&"thetaStart"!==t&&"thetaLength"!==t||e!==i&&this.updateMesh()}remesh(){const t=this.program.gl,{radiusTop:e,radiusBottom:i,height:n,radialSegments:r,heightSegments:o,openEnded:s,thetaStart:a,thetaLength:h}=this.attributes,l=new Sn(t,{radiusTop:e,radiusBottom:i,height:n,radialSegments:r,heightSegments:o,openEnded:s,thetaStart:a,thetaLength:h});this.setGeometry(l)}}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(Bn,"Attr",class extends Ve{constructor(t){super(t),this[Nn]({radiusTop:.5,radiusBottom:.5,height:1,radialSegments:16,heightSegments:1,openEnded:!1,thetaStart:0,thetaLength:2*Math.PI})}get radiusTop(){return this[Rn]("radiusTop")}set radiusTop(t){this[Cn]("radiusTop",t)}get radiusBottom(){return this[Rn]("radiusBottom")}set radiusBottom(t){this[Cn]("radiusBottom",t)}get radius(){return[this.radiusTop,this.radiusBottom]}set radius(t){Array.isArray(t)||(t=[t,t]),this.radiusTop=t[0],this.radiusBottom=t[1]}get height(){return this[Rn]("height")}set height(t){this[Cn]("height",t)}get radialSegments(){return this[Rn]("radialSegments")}set radialSegments(t){this[Cn]("radialSegments",t)}get heightSegments(){return this[Rn]("heightSegments")}set heightSegments(t){this[Cn]("heightSegments",t)}get openEnded(){return this[Rn]("openEnded")}set openEnded(t){this[Cn]("openEnded",t)}get thetaStart(){return this[Rn]("thetaStart")}set thetaStart(t){this[Cn]("thetaStart",t)}get thetaLength(){return this[Rn]("thetaLength")}set thetaLength(t){this[Cn]("thetaLength",t)}}),Object(Pt.registerNode)(Bn,"cylinder");const Dn=Symbol.for("spritejs_setAttribute"),Un=Symbol.for("spritejs_getAttribute"),Tn=Symbol.for("spritejs_setAttributeDefault");function zn({points:t,position:e,index:i,normal:n,uv:r,offset:o,depth:s}){const a=function(t){const e=t.length;if(e<3)return 0;let i=1/0,n=0;for(let r=0;r<e;r++){const e=t[r][0];e<i&&(i=e,n=r)}let r=t[(e+n-1)%e];const o=t[n];let s=t[(n+1)%e];r[0]===o[0]&&r[1]===o[1]&&(r=t[(e+n-2)%e]),o[0]===s[0]&&o[1]===s[1]&&(s=t[(n+2)%e]);const a=[r[0]-o[0],r[1]-o[1]],h=[s[0]-o[0],s[1]-o[1]],l=a[0]*h[1]-h[0]*a[1];return 0===l?0:l>0?1:-1}(t=[...t]);if(t.length<=1)return;let h=0;const l=t.length;for(let e=1;e<l;e++)h+=Math.hypot(t[e][0]-t[e-1][0],t[e][1],t[e-1][1]);let c=0;for(let u=0;u<l-1;u++){const l=t[u],d=t[u+1],p=new x(l[0],l[1],-.5*s),m=new x(l[0],l[1],.5*s),g=new x(d[0],d[1],-.5*s),f=new x(d[0],d[1],.5*s);e.push(...p,...m,...g,...f),i.push(o+4*u,o+4*u+1,o+4*u+2),i.push(o+4*u+1,o+4*u+3,o+4*u+2);const v=(new x).sub(p,g).scale(a||1),y=[0,0,s],b=(new x).cross(v,y).normalize();n.push(...b,...b,...b,...b);let w=c/h;r.push(w,0,w,1),c+=Math.hypot(d[0]-l[0],d[1]-l[1]),w=c/h,r.push(w,0,w,1)}}class On extends ii{onPropertyChange(t,e,i){super.onPropertyChange(t,e,i),"d"!==t&&"fillRule"!==t&&"lineWidth"!==t&&"lineJoin"!==t&&"lineCap"!==t&&"roundSegments"!==t&&"miterLimit"!==t&&"depth"!==t&&"capFront"!==t&&"capBack"!==t||e!==i&&this.updateMesh()}fromPoints(t){const e=`M${t.join("L")}Z`.replace(/,/g," ");this.attr("d",e)}remesh(){const t=this.program.gl,{d:e,type:i,fillRule:n,lineWidth:r,lineJoin:o,lineCap:s,roundSegments:a,miterLimit:h,depth:l,capFront:c,capBack:u}=this.attributes,d=new Pt.Path(e);if("stroke"===i)throw d.attr("strokeColor","rgba(0, 0, 0, 0)"),new Error("Not supported yet.");d.attr({fillColor:"#fff",d:e,fillRule:n,lineWidth:r,lineJoin:o,lineCap:s,roundSegments:a,miterLimit:h});const p=d.mesh;if(p){const e=[],n=[],r=[],o=[];let s=0;if("fill"===i){p.contours.forEach(t=>{zn({points:t,position:e,index:n,normal:r,uv:o,offset:s,depth:l});t.length>1&&(s=e.length/3)})}else if("stroke"===i){const t=p.meshData.position0.filter(([t,e,i])=>1/i<0);zn({points:t,position:e,index:n,normal:r,uv:o,offset:s,depth:l});t.length>1&&(s=e.length/3)}if(c||u){let t=p.meshData.position0,a=p.meshData.cells;if("stroke"===i){const e=t.length;t=t.filter(([t,e,i])=>1/i<0);const i=e-t.length;a=a.map(([t,e,n])=>[t-i,n-i,e-i]).filter(([t])=>t>=0)}const h=function(t,e){const[i,n]=[t[1][0]-t[0][0],t[1][1]-t[0][1]],r=[];for(let o=0;o<e.length;o++){const s=e[o],a=[(s[0]-t[0][0])/i,1-(s[1]-t[0][1])/n];r.push(a)}return r}(p.boundingBox,t);if(c){for(let i=0;i<t.length;i++){const n=t[i];c&&(e.push(n[0],n[1],.5*l),r.push(0,0,1),o.push(...h[i]))}for(let t=0;t<a.length;t++){const e=a[t];n.push(e[0]+s,e[1]+s,e[2]+s)}s=e.length/3}if(u){for(let i=0;i<t.length;i++){const n=t[i];c&&(e.push(n[0],n[1],-.5*l),r.push(0,0,-1),o.push(...h[i]))}for(let t=0;t<a.length;t++){const e=a[t];n.push(e[0]+s,e[2]+s,e[1]+s)}s=e.length/3}}const a=new je(t,{position:e,index:n,normal:r,uv:o},!1);this.setGeometry(a),this.mesh2d=p}}}function Fn(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function jn(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function In(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}!function(t,e,i){e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i}(On,"Attr",class extends Ve{constructor(t){super(t),this[Tn]({d:"",type:"fill",fillRule:"nonzero",lineWidth:1,lineJoin:"miter",lineCap:"butt",roundSegments:20,miterLimit:10,depth:1,capFront:!0,capBack:!0})}get d(){return this[Un]("d")}set d(t){this[Dn]("d",t)}get type(){return this[Un]("type")}set type(t){if(null!=t&&"fill"!==t&&"stroke"!==t)throw new TypeError("Invalid type.");return this[Dn]("type",t)}get fillRule(){return this[Un]("fillRule")}set fillRule(t){if(null!=t&&"nonzero"!==t&&"evenodd"!==t)throw new TypeError("Invalid fill rule.");this[Dn]("fillRule",t)}get lineWidth(){return this[Un]("lineWidth")}set lineWidth(t){this[Dn]("lineWidth",t)}get lineJoin(){return this[Un]("lineJoin")}set lineJoin(t){if(null!=t&&"miter"!==t&&"bevel"!==t&&"round"!==t)throw new TypeError("Invalid lineJoin type.");this[Dn]("lineJoin",t)}get lineCap(){return this[Un]("lineCap")}set lineCap(t){if(null!=t&&"butt"!==t&&"square"!==t&&"round"!==t)throw new TypeError("Invalid lineCap type.");this[Dn]("lineCap",t)}get miterLimit(){return this[Un]("miterLimit")}set miterLimit(t){this[Dn]("miterLimit",t)}get roundSegments(){return this[Un]("roundSegments")}set roundSegments(t){this[Dn]("roundSegments",t)}get depth(){return this[Un]("depth")}set depth(t){this[Dn]("depth",t)}get capFront(){return this[Un]("capFront")}set capFront(t){this[Dn]("capFront",t)}get capBack(){return this[Un]("capBack")}set capBack(t){this[Dn]("capBack",t)}}),Object(Pt.registerNode)(On,"path3d");const Gn=Symbol("target"),kn=Symbol("buffer");class Vn extends Ce{constructor(t,e={}){let{width:i=t.canvas.width,height:n=t.canvas.height,target:r=t.FRAMEBUFFER,color:o=1,depth:s=!0,stencil:a=!1,depthTexture:h=!1,wrapS:l=t.CLAMP_TO_EDGE,wrapT:c=t.CLAMP_TO_EDGE,minFilter:u=t.LINEAR,magFilter:d=u,type:p=t.UNSIGNED_BYTE,format:m=t.RGBA,internalFormat:g=m,unpackAlignment:f,premultiplyAlpha:v,camera:y,buffer:b=!1}=e;super(In(e,["width","height","target","color","depth","stencil","depthTexture","wrapS","wrapT","minFilter","magFilter","type","format","internalFormat","unpackAlignment","premultiplyAlpha","camera","buffer"]));const x={width:i,height:n,target:r,color:o,depth:s,stencil:a,depthTexture:h,wrapS:l,wrapT:c,minFilter:u,magFilter:d,type:p,format:m,internalFormat:g,unpackAlignment:f,premultiplyAlpha:v};if(this.options=x,this[Gn]=new K(t,x),b&&(this[kn]=new K(t,this.options)),y){const e=new ze(t,y);e.connect(this,0),this.camera=e}}get texture(){return this[kn]?this[kn].texture:this[Gn].texture}renderBy(t,e={}){let{root:i=this}=e,n=In(e,["root"]);const r=this.camera?this.camera.body:null,o=this[Gn];return this.dispatchEvent({type:"beforerender",detail:{scene:i,camera:r,renderer:t}}),t.renderer.render(function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?Fn(Object(i),!0).forEach((function(e){jn(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Fn(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({scene:i.body,camera:r,target:o},n)),this.dispatchEvent({type:"afterrender",detail:{scene:i,camera:r,renderer:t}}),this[Gn].texture}swap(){if(null==this[kn])throw new Error("No buffer to swap. You must set buffer option to true when creating the renderTarget object.");[this[Gn],this[kn]]=[this[kn],this[Gn]]}}Object(Pt.registerNode)(Vn,"rendertarget");class Xn extends J{constructor(t,{buffer:e,wrapS:i=t.CLAMP_TO_EDGE,wrapT:n=t.CLAMP_TO_EDGE,anisotropy:r=0}={}){if(super(t,{generateMipmaps:!1,wrapS:i,wrapT:n,anisotropy:r}),e)return this.parseBuffer(e)}parseBuffer(t){const e=new Yn(t);e.mipmaps.isCompressedTexture=!0,this.image=e.mipmaps,this.internalFormat=e.glInternalFormat,this.minFilter=e.numberOfMipmapLevels>1?this.gl.NEAREST_MIPMAP_LINEAR:this.gl.LINEAR}}function Yn(t){const e=[171,75,84,88,32,49,49,187,13,10,26,10],i=new Uint8Array(t,0,12);for(let t=0;t<i.length;t++)if(i[t]!==e[t])return console.error("File missing KTX identifier");const n=Uint32Array.BYTES_PER_ELEMENT,r=new DataView(t,12,13*n),o=67305985===r.getUint32(0,!0);if(0!==r.getUint32(1*n,o))return console.warn("only compressed formats currently supported");this.glInternalFormat=r.getUint32(4*n,o);let s=r.getUint32(6*n,o),a=r.getUint32(7*n,o);this.numberOfFaces=r.getUint32(10*n,o),this.numberOfMipmapLevels=Math.max(1,r.getUint32(11*n,o));const h=r.getUint32(12*n,o);this.mipmaps=[];let l=64+h;for(let e=0;e<this.numberOfMipmapLevels;e++){const e=new Int32Array(t,l,1)[0];l+=4;for(let i=0;i<this.numberOfFaces;i++){const i=new Uint8Array(t,l,e);this.mipmaps.push({data:i,width:s,height:a}),l+=e,l+=3-(e+3)%4}s>>=1,a>>=1}}let qn={};const Wn=[];function Hn(){return 0==document.createElement("canvas").toDataURL("image/webp").indexOf("data:image/webp")}function Zn(t){return Math.log2(t)%1==0}class $n{static load(t,e){const i=class{static load(t,{src:e,wrapS:i=t.CLAMP_TO_EDGE,wrapT:n=t.CLAMP_TO_EDGE,anisotropy:r=0,format:o=t.RGBA,internalFormat:s=o,generateMipmaps:a=!0,minFilter:h=(a?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:l=t.LINEAR,premultiplyAlpha:c=!1,unpackAlignment:u=4,flipY:d=!0}={}){const p=this.getSupportedExtensions(t);let m="none";if("string"==typeof e&&(m=e.split(".").pop().split("?")[0].toLowerCase()),"object"==typeof e)for(const t in e)if(p.includes(t.toLowerCase())){m=t.toLowerCase(),e=e[t];break}const g=e+i+n+r+o+s+a+h+l+c+u+d+t.renderer.id;if(qn[g])return qn[g];let f;switch(m){case"ktx":case"pvrtc":case"s3tc":case"etc":case"etc1":case"astc":f=new Xn(t,{src:e,wrapS:i,wrapT:n,anisotropy:r}),f.loaded=this.loadKTX(e,f);break;case"webp":case"jpg":case"jpeg":case"png":f=new J(t,{wrapS:i,wrapT:n,anisotropy:r,format:o,internalFormat:s,generateMipmaps:a,minFilter:h,magFilter:l,premultiplyAlpha:c,unpackAlignment:u,flipY:d}),f.loaded=this.loadImage(t,e,f);break;default:console.warn("No supported format supplied"),f=new J(t)}return f.ext=m,qn[g]=f,f}static getSupportedExtensions(t){if(Wn.length)return Wn;const e={pvrtc:t.renderer.getExtension("WEBGL_compressed_texture_pvrtc")||t.renderer.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),s3tc:t.renderer.getExtension("WEBGL_compressed_texture_s3tc")||t.renderer.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.renderer.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc"),etc:t.renderer.getExtension("WEBGL_compressed_texture_etc"),etc1:t.renderer.getExtension("WEBGL_compressed_texture_etc1"),astc:t.renderer.getExtension("WEBGL_compressed_texture_astc")};for(const t in e)e[t]&&Wn.push(t);return Hn&&Wn.push("webp"),Wn.push("png","jpg"),Wn}static loadKTX(t,e){return fetch(t).then(t=>t.arrayBuffer()).then(t=>e.parseBuffer(t))}static loadImage(t,e,i){return function(t){return new Promise(e=>{const i=new Image;i.src=t;const n=navigator.userAgent.toLowerCase().includes("chrome");window.createImageBitmap&&n?i.onload=()=>{createImageBitmap(i,{imageOrientation:"flipY",premultiplyAlpha:"none"}).then(t=>{e(t)})}:i.onload=()=>e(i)})}(e).then(e=>(Zn(e.width)&&Zn(e.height)||(i.generateMipmaps&&(i.generateMipmaps=!1),i.minFilter===t.NEAREST_MIPMAP_LINEAR&&(i.minFilter=t.LINEAR),i.wrapS===t.REPEAT&&(i.wrapS=i.wrapT=t.CLAMP_TO_EDGE)),i.image=e,i.onUpdate=()=>{e.close&&e.close(),i.onUpdate=null},e))}static clearCache(){qn={}}}.load(t.gl,e);return i&&i.loaded&&i.loaded.then?i.loaded.then(()=>{t.forceUpdate()}):i&&i.then&&i.then(()=>{t.forceUpdate()}),i}}var Qn="#extension GL_OES_standard_derivatives : enable\n\n#ifdef FLAG_BUMP\nuniform sampler2D tBump;\n#endif\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\nuniform sampler2D tMap;\n\nuniform sampler2D tNormal;\nuniform float uNormalScale;\nuniform float uNormalUVScale;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 invDir = -invDirectional.xyz;\n    vec3 halfLE = normalize(invDir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invDir);\n    float _dl = max(dot(normal, dir), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    dl += directionalLightColor[j].a * _dln * _dl * (directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invPoint);// 计算点光源入射光线反方向并归一化\n    float cos = max(dot(dir, normal), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    pl += pointLightColor[i].a * _dln * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float _dln = max(dot(vNormal, normalInv), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * _dln * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nvec3 getNormal(float depth) {\n  vec3 pos_dx = dFdx(vPos.xyz);\n  vec3 pos_dy = dFdy(vPos.xyz);\n  vec2 tex_dx = dFdx(vUv);\n  vec2 tex_dy = dFdy(vUv);\n\n  vec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\n  vec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\n  mat3 tbn = mat3(t, b, normalize(vNormal));\n\n  vec3 n = texture2D(tNormal, vUv * uNormalUVScale).rgb * 2.0 - 1.0;\n  n.xy *= depth * uNormalScale;\n  vec3 normal = normalize(tbn * n);\n\n  // Get world normal from view normal\n  return normal;\n  // return normalize((vec4(normal, 0.0) * viewMatrix).xyz);\n}\n\nvoid main() {\n  vec4 color = vColor;\n  vec4 texColor = texture2D(tMap, vUv);\n\n  float alpha = texColor.a;\n  color.rgb = mix(color.rgb, texColor.rgb, alpha);\n  color.rgb = mix(texColor.rgb, color.rgb, clamp(color.a / max(0.0001, texColor.a), 0.0, 1.0));\n  color.a = texColor.a + (1.0 - texColor.a) * color.a;\n\n  float depth = 1.0;\n#ifdef FLAG_BUMP\n  depth = texture2D(tBump, vUv).x;\n#endif\n  vec3 normal = getNormal(depth);\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, normal, eyeDirection);\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n  \n  gl_FragColor = vec4((diffuse + ambient) * color.rgb, color.a);\n}",Jn="precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec2 uv;\nattribute vec3 normal;\nattribute vec4 color;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vUv = uv;\n  vNormal = normalize(normalMatrix * normal);\n  vColor = color;\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n\n  gl_Position = projectionMatrix * vPos;\n}",Kn="#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\nuniform sampler2D tMap;\n\n#ifdef FLAG_BUMP\nuniform sampler2D tBump;\n#endif\n\nuniform sampler2D tNormal;\nuniform float uNormalScale;\nuniform float uNormalUVScale;\n\nin vec2 vUv;\nin vec3 vNormal;\nin vec4 vColor;\nin vec4 vPos;\nin vec3 vCameraPos;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 invDir = -invDirectional.xyz;\n    vec3 halfLE = normalize(invDir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invDir);\n    float _dl = max(dot(normal, dir), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    dl += directionalLightColor[j].a * _dln * _dl * (directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invPoint);// 计算点光源入射光线反方向并归一化\n    float cos = max(dot(dir, normal), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    pl += pointLightColor[i].a * _dln * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float _dln = max(dot(vNormal, normalInv), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * _dln * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nout vec4 FragColor;\n\nvec3 getNormal(float depth) {\n  vec3 pos_dx = dFdx(vPos.xyz);\n  vec3 pos_dy = dFdy(vPos.xyz);\n  vec2 tex_dx = dFdx(vUv);\n  vec2 tex_dy = dFdy(vUv);\n\n  vec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\n  vec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\n  mat3 tbn = mat3(t, b, normalize(vNormal));\n\n  vec3 n = texture(tNormal, vUv * uNormalUVScale).rgb * 2.0 - 1.0;\n  n.xy *= depth * uNormalScale;\n  vec3 normal = normalize(tbn * n);\n\n  // Get world normal from view normal\n  return normal;\n  // return normalize((vec4(normal, 0.0) * viewMatrix).xyz);\n}\n\nvoid main() {\n  vec4 color = vColor;\n  vec4 texColor = texture(tMap, vUv);\n\n  float alpha = texColor.a;\n  color.rgb = mix(color.rgb, texColor.rgb, alpha);\n  color.rgb = mix(texColor.rgb, color.rgb, clamp(color.a / max(0.0001, texColor.a), 0.0, 1.0));\n  color.a = texColor.a + (1.0 - texColor.a) * color.a;\n\n  float depth = 1.0;\n#ifdef FLAG_BUMP\n  depth = texture(tBump, vUv).x;\n#endif\n  vec3 normal = getNormal(depth);\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, normal, eyeDirection);\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n\n  FragColor = vec4((diffuse + ambient) * color.rgb, color.a);\n}",tr="#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec3 position;\nin vec2 uv;\nin vec3 normal;\nin vec4 color;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 cameraPosition;\n\nout vec2 vUv;\nout vec3 vNormal;\nout vec4 vColor;\nout vec4 vPos;\nout vec3 vCameraPos;\n\nvoid main() {\n  vUv = uv;\n  vNormal = normalize(normalMatrix * normal);\n  vColor = color;\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n\n  gl_Position = projectionMatrix * vPos;\n}",er="#extension GL_OES_standard_derivatives : enable\n\n#ifdef FLAG_BUMP\nuniform sampler2D tBump;\n#endif\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\n\nuniform sampler2D tNormal;\nuniform float uNormalScale;\nuniform float uNormalUVScale;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 invDir = -invDirectional.xyz;\n    vec3 halfLE = normalize(invDir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invDir);\n    float _dl = max(dot(normal, dir), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    dl += directionalLightColor[j].a * _dln * _dl * (directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invPoint);// 计算点光源入射光线反方向并归一化\n    float cos = max(dot(dir, normal), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    pl += pointLightColor[i].a * _dln * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float _dln = max(dot(vNormal, normalInv), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * _dln * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nvec3 getNormal(float depth) {\n  vec3 pos_dx = dFdx(vPos.xyz);\n  vec3 pos_dy = dFdy(vPos.xyz);\n  vec2 tex_dx = dFdx(vUv);\n  vec2 tex_dy = dFdy(vUv);\n\n  vec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\n  vec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\n  mat3 tbn = mat3(t, b, normalize(vNormal));\n\n  vec3 n = texture2D(tNormal, vUv * uNormalUVScale).rgb * 2.0 - 1.0;\n  n.xy *= depth * uNormalScale;\n  vec3 normal = normalize(tbn * n);\n\n  // Get world normal from view normal\n  return normal;\n  // return normalize((vec4(normal, 0.0) * viewMatrix).xyz);\n}\n\nvoid main() {\n  vec4 color = vColor;\n\n  float depth = 1.0;\n#ifdef FLAG_BUMP\n  depth = texture2D(tBump, vUv).x;\n#endif\n  vec3 normal = getNormal(depth);\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, normal, eyeDirection);\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n\n  // 微光\n  float dl = 0.1 * ambientColor.a * max(dot(normal, vNormal), 0.0);\n\n  gl_FragColor = vec4((diffuse + ambient + dl) * color.rgb, color.a);\n}",ir="precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec2 uv;\nattribute vec3 normal;\nattribute vec4 color;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vUv = uv;\n  vNormal = normalize(normalMatrix * normal);\n  vColor = color;\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n\n  gl_Position = projectionMatrix * vPos;\n}",nr="#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\n\n#ifdef FLAG_BUMP\nuniform sampler2D tBump;\n#endif\n\nuniform sampler2D tNormal;\nuniform float uNormalScale;\nuniform float uNormalUVScale;\n\nin vec2 vUv;\nin vec3 vNormal;\nin vec4 vColor;\nin vec4 vPos;\nin vec3 vCameraPos;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 invDir = -invDirectional.xyz;\n    vec3 halfLE = normalize(invDir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invDir);\n    float _dl = max(dot(normal, dir), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    dl += directionalLightColor[j].a * _dln * _dl * (directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    vec3 dir = normalize(invPoint);// 计算点光源入射光线反方向并归一化\n    float cos = max(dot(dir, normal), 0.0);\n    float _dln = max(dot(vNormal, dir), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    pl += pointLightColor[i].a * _dln * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float _dln = max(dot(vNormal, normalInv), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * _dln * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nout vec4 FragColor;\n\nvec3 getNormal(float depth) {\n  vec3 pos_dx = dFdx(vPos.xyz);\n  vec3 pos_dy = dFdy(vPos.xyz);\n  vec2 tex_dx = dFdx(vUv);\n  vec2 tex_dy = dFdy(vUv);\n\n  vec3 t = normalize(pos_dx * tex_dy.t - pos_dy * tex_dx.t);\n  vec3 b = normalize(-pos_dx * tex_dy.s + pos_dy * tex_dx.s);\n  mat3 tbn = mat3(t, b, normalize(vNormal));\n\n  vec3 n = texture(tNormal, vUv * uNormalUVScale).rgb * 2.0 - 1.0;\n  n.xy *= depth * uNormalScale;\n  vec3 normal = normalize(tbn * n);\n\n  // Get world normal from view normal\n  return normal;\n  // return normalize((vec4(normal, 0.0) * viewMatrix).xyz);\n}\n\nvoid main() {\n  vec4 color = vColor;\n\n  float depth = 1.0;\n#ifdef FLAG_BUMP\n  depth = texture(tBump, vUv).x;\n#endif\n  vec3 normal = getNormal(depth);\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, normal, eyeDirection);\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n  \n  // 微光\n  float dl = 0.1 * ambientColor.a * max(dot(normal, vNormal), 0.0);\n\n  FragColor = vec4((diffuse + ambient + dl) * color.rgb, color.a);\n}",rr="#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec3 position;\nin vec2 uv;\nin vec3 normal;\nin vec4 color;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec3 cameraPosition;\n\nout vec2 vUv;\nout vec3 vNormal;\nout vec4 vColor;\nout vec4 vPos;\nout vec3 vCameraPos;\n\nvoid main() {\n  vUv = uv;\n  vNormal = normalize(normalMatrix * normal);\n  vColor = color;\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n\n  gl_Position = projectionMatrix * vPos;\n}";const or={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec3 vNormal;\n\nvoid main() {\n    vNormal = normalize(normalMatrix * normal);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\n\nvoid main() {\n    gl_FragColor.rgb = normalize(vNormal);\n    gl_FragColor.a = 1.0;\n}"},sr={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main() {\n  vColor = color;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);;\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec4 vColor;\n\nvoid main() {\n  gl_FragColor = vColor;\n}"},ar={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  vPos = modelViewMatrix * vec4(position, 1.0);;\n  vColor = color;\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n  gl_Position = projectionMatrix * vPos;\n}",fragment:"precision highp float;\nprecision highp int;\n\nuniform mat4 viewMatrix;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 dir = -invDirectional.xyz;\n    vec3 halfLE = normalize(dir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    float _dl = max(dot(normal, normalize(dir)), 0.0);\n    dl += directionalLightColor[j].a * (_dl * directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalize(invPoint), normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    \n    pl += pointLightColor[i].a * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vNormal;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vec4 color = vColor;\n  // ambientColor.a 是强度\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  // 漫反射\n  vec3 diffuse = getDiffuse(vPos.xyz, vNormal, eyeDirection);\n  gl_FragColor = vec4((diffuse + ambient) * color.rgb, color.a);\n}"},hr=ar,lr={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec2 vUv;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vColor = color;\n  vUv = uv;\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n  gl_Position = projectionMatrix * vPos;\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\nvarying vec4 vColor;\n\nuniform sampler2D tMap;\nvarying vec2 vUv;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nuniform mat4 viewMatrix;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 dir = -invDirectional.xyz;\n    vec3 halfLE = normalize(dir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    float _dl = max(dot(normal, normalize(dir)), 0.0);\n    dl += directionalLightColor[j].a * (_dl * directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalize(invPoint), normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    \n    pl += pointLightColor[i].a * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nvoid main() {\n  vec4 color = vColor;\n  vec4 texColor = texture2D(tMap, vUv);\n\n  float alpha = texColor.a;\n  color.rgb = mix(color.rgb, texColor.rgb, alpha);\n  color.rgb = mix(texColor.rgb, color.rgb, clamp(color.a / max(0.0001, texColor.a), 0.0, 1.0));\n  color.a = texColor.a + (1.0 - texColor.a) * color.a;\n\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, vNormal, eyeDirection);\n\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n  gl_FragColor = vec4((diffuse + ambient) * color.rgb, color.a);\n}"},cr=lr,ur=lr,dr={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec3 vNormal;\nvarying vec3 vDir;\nvarying vec4 vColor;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vDir = normalize(position);\n  vColor = color;\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n  gl_Position = projectionMatrix * vPos;\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\nvarying vec3 vDir;\nvarying vec4 vColor;\n\nuniform samplerCube tMap;\n\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nuniform mat4 viewMatrix;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 dir = -invDirectional.xyz;\n    vec3 halfLE = normalize(dir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    float _dl = max(dot(normal, normalize(dir)), 0.0);\n    dl += directionalLightColor[j].a * (_dl * directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalize(invPoint), normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    \n    pl += pointLightColor[i].a * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nvoid main() {\n  vec4 color = vColor;\n  vec4 texColor = textureCube(tMap, vDir);\n\n  float alpha = texColor.a;\n  color.rgb = mix(color.rgb, texColor.rgb, alpha);\n  color.rgb = mix(texColor.rgb, color.rgb, clamp(color.a / max(0.0001, texColor.a), 0.0, 1.0));\n  color.a = texColor.a + (1.0 - texColor.a) * color.a;\n\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, vNormal, eyeDirection);\n\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n  gl_FragColor = vec4((diffuse + ambient) * color.rgb, color.a);\n}"},pr={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec4 vColor;\nvarying vec4 vLightNDC;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\nuniform mat4 shadowViewMatrix;\nuniform mat4 shadowProjectionMatrix;\n\n// Matrix to shift range from -1->1 to 0->1\nconst mat4 depthScaleMatrix = mat4(\n    0.5, 0, 0, 0, \n    0, 0.5, 0, 0, \n    0, 0, 0.5, 0, \n    0.5, 0.5, 0.5, 1\n);\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vColor = color;\n  vUv = uv;\n  vLightNDC = depthScaleMatrix * shadowProjectionMatrix * shadowViewMatrix * modelMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n  gl_Position = projectionMatrix * vPos;\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\n\nuniform sampler2D tMap;\nuniform sampler2D tShadow;\nuniform float uShadow;\nvarying vec2 vUv;\n\nvarying float fCos;\nvarying float fShading;\nvarying vec4 vColor;\nvarying vec3 vCameraPos;\n\nvarying vec4 vLightNDC; // 阴影\nvarying vec4 vPos;\n\nuniform mat4 viewMatrix;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 dir = -invDirectional.xyz;\n    vec3 halfLE = normalize(dir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    float _dl = max(dot(normal, normalize(dir)), 0.0);\n    dl += directionalLightColor[j].a * (_dl * directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalize(invPoint), normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    \n    pl += pointLightColor[i].a * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nfloat unpackRGBA (vec4 v) {\n    return dot(v, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0));\n}\n\nvoid main() {\n  vec4 color = vColor;\n  vec4 texColor = texture2D(tMap, vUv);\n\n  float alpha = texColor.a;\n  color.rgb = mix(color.rgb, texColor.rgb, alpha);\n  color.rgb = mix(texColor.rgb, color.rgb, clamp(color.a / max(0.0001, texColor.a), 0.0, 1.0));\n  color.a = texColor.a + (1.0 - texColor.a) * color.a;\n\n  vec3 lightPos = vLightNDC.xyz / vLightNDC.w;\n  \n  float bias = 0.001;\n  float depth = lightPos.z - bias;\n  float occluder = unpackRGBA(texture2D(tShadow, lightPos.xy));\n\n  // Compare actual depth from light to the occluded depth rendered in the depth map\n  // If the occluded depth is smaller, we must be in uShadow\n  float uShadowDept = mix(uShadow, 1.0, step(depth, occluder));\n\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, vNormal, eyeDirection);\n\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n\n  color = vec4((diffuse + ambient) * color.rgb, color.a);\n\n  gl_FragColor.rgb = color.rgb * uShadowDept;\n  gl_FragColor.a = color.a;\n}"},mr={vertex:"precision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nuniform mat4 shadowViewMatrix;\nuniform mat4 shadowProjectionMatrix;\nuniform vec3 cameraPosition;\n\nvarying vec3 vNormal;\nvarying vec4 vColor;\nvarying vec4 vLightNDC;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\n// Matrix to shift range from -1->1 to 0->1\nconst mat4 depthScaleMatrix = mat4(\n    0.5, 0, 0, 0, \n    0, 0.5, 0, 0, \n    0, 0, 0.5, 0, \n    0.5, 0.5, 0.5, 1\n);\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  vPos = modelViewMatrix * vec4(position, 1.0);\n  vColor = color;\n  vLightNDC = depthScaleMatrix * shadowProjectionMatrix * shadowViewMatrix * modelMatrix * vec4(position, 1.0);\n  vCameraPos = (viewMatrix * vec4(cameraPosition, 1.0)).xyz;\n  gl_Position = projectionMatrix * vPos;\n}",fragment:"precision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\nvarying vec4 vColor;\n\nuniform sampler2D tShadow;\nuniform float uShadow;\nuniform mat4 viewMatrix;\n\nvarying vec4 vLightNDC;\nvarying vec4 vPos;\nvarying vec3 vCameraPos;\n\n#define DL_NUMBER 8\n#define PL_NUMBER 16\n#define SP_NUMBER 16\n\nuniform vec3 directionalLight[DL_NUMBER]; //平行光 xyz - 向量位置\nuniform vec4 directionalLightColor[DL_NUMBER]; // 平行光颜色, a - 强度\n\nuniform vec3 pointLightPosition[PL_NUMBER]; //点光源位置\nuniform vec4 pointLightColor[PL_NUMBER]; // 点光源颜色\nuniform vec3 pointLightDecay[PL_NUMBER]; // 点光源衰减系数\n\nuniform vec3 spotLightPosition[SP_NUMBER];  // 聚光灯位置\nuniform vec4 spotLightColor[SP_NUMBER]; // 聚光灯颜色\nuniform vec3 spotLightDirection[SP_NUMBER]; // 聚光灯方向\nuniform vec3 spotLightDecay[SP_NUMBER];  // 聚光灯衰减系数\nuniform float spotLightAngle[SP_NUMBER];  // 聚光灯角度\nuniform float spotLightBlur[SP_NUMBER]; // 聚关灯散射系数\n\nuniform vec4 ambientColor; // 环境光\nuniform float specularFocus; // 镜面反射聚焦度\nuniform float specularIntensity; // 镜面反射强度\n\nvec3 getDiffuse(in vec3 pos, in vec3 normal, in vec3 eye) {\n  // 多个平行光\n  vec3 dl = vec3(0);\n  for(int j = 0; j < DL_NUMBER; j++) {\n    if(directionalLightColor[j].a <= 0.0) continue;\n    vec4 invDirectional = viewMatrix * vec4(directionalLight[j], 0.0);\n    vec3 dir = -invDirectional.xyz;\n    vec3 halfLE = normalize(dir + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n    float _dl = max(dot(normal, normalize(dir)), 0.0);\n    dl += directionalLightColor[j].a * (_dl * directionalLightColor[j].rgb + specular);\n  }\n\n  // 多个点光源\n  vec3 pl = vec3(0);\n  for(int i = 0; i < PL_NUMBER; i++) {\n    if(pointLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(pointLightPosition[i], 1.0)).xyz - pos;\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalize(invPoint), normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (pointLightDecay[i].x * pow(dis, 2.0) + pointLightDecay[i].y * dis + pointLightDecay[i].z));\n    \n    pl += pointLightColor[i].a * cos * decay * (pointLightColor[i].rgb + specular);\n  }\n\n  vec3 sl = vec3(0);\n\n  for(int i = 0; i < SP_NUMBER; i++) {\n    if(spotLightColor[i].a <= 0.0) continue;\n    vec3 invPoint = (viewMatrix * vec4(spotLightPosition[i], 1.0)).xyz - pos;\n    vec3 normalInv = normalize(invPoint);\n\n    vec3 dir = (viewMatrix * vec4(spotLightDirection[i], 0.0)).xyz;\n    float ang = cos(spotLightAngle[i]);\n    float r = smoothstep(ang * (1.0 - spotLightBlur[i]), ang, dot(normalInv, normalize(-dir)));\n    if(r <= 0.0) continue;\n\n    vec3 halfLE = normalize(invPoint + eye);\n    float specular = specularIntensity * pow(clamp(dot(normal, halfLE), 0.0, 1.0), 100.0 * specularFocus);\n\n    float cos = max(dot(normalInv, normal), 0.0);\n    float dis = length(invPoint);\n    float decay = min(1.0, 1.0 / (spotLightDecay[i].x * pow(dis, 2.0) + spotLightDecay[i].y * dis + spotLightDecay[i].z));\n    decay *= r;\n    \n    sl += spotLightColor[i].a * cos * decay * (spotLightColor[i].rgb + specular);\n  }\n\n  return dl + pl + sl;\n}\n\nfloat unpackRGBA (vec4 v) {\n    return dot(v, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0));\n}\n\nvoid main() {\n  vec4 color = vColor;\n\n  vec3 lightPos = vLightNDC.xyz / vLightNDC.w;\n  \n  float bias = 0.001;\n  float depth = lightPos.z - bias;\n  float occluder = unpackRGBA(texture2D(tShadow, lightPos.xy));\n\n  // Compare actual depth from light to the occluded depth rendered in the depth map\n  // If the occluded depth is smaller, we must be in uShadow\n  float uShadowDept = mix(uShadow, 1.0, step(depth, occluder));\n\n  vec3 ambient = ambientColor.rgb * ambientColor.a;// 计算环境光反射颜色\n\n  vec3 eyeDirection = normalize(vCameraPos - vPos.xyz);\n  vec3 diffuse = getDiffuse(vPos.xyz, vNormal, eyeDirection);\n\n  color = vec4((diffuse + ambient) * color.rgb, color.a);\n\n  gl_FragColor.rgb = color.rgb * uShadowDept;\n  gl_FragColor.a = color.a;\n}"},gr={vertex:"precision highp float;\nattribute vec3 position;\nattribute vec3 next;\nattribute vec3 prev;\nattribute float side;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec2 uResolution;\nuniform float uDPR;\nuniform float uThickness;\nuniform float uMiter;\n\nvarying vec4 vColor;\n\nvec4 getPosition() {\n    mat4 mvp = projectionMatrix * modelViewMatrix;\n    vec4 current = mvp * vec4(position, 1);\n    vec4 nextPos = mvp * vec4(next, 1);\n    vec4 prevPos = mvp * vec4(prev, 1);\n    vec2 aspect = vec2(uResolution.x / uResolution.y, 1);    \n    vec2 currentScreen = current.xy / current.w * aspect;\n    vec2 nextScreen = nextPos.xy / nextPos.w * aspect;\n    vec2 prevScreen = prevPos.xy / prevPos.w * aspect;\n\n    vec2 dir1 = normalize(currentScreen - prevScreen);\n    vec2 dir2 = normalize(nextScreen - currentScreen);\n    vec2 dir = normalize(dir1 + dir2);\n\n    vec2 normal = vec2(-dir.y, dir.x);\n    normal /= mix(1.0, max(0.3, dot(normal, vec2(-dir1.y, dir1.x))), uMiter);\n    normal /= aspect;\n    float pixelWidthRatio = 1.0 / (uResolution.y / uDPR);\n    float pixelWidth = current.w * pixelWidthRatio;\n    normal *= pixelWidth * uThickness;\n    current.xy -= normal * side;\n    return current;\n}\n\nvoid main() {\n    gl_Position = getPosition();\n    vColor = color;\n}",fragment:"precision highp float;\n\nvarying vec4 vColor;\n\nvoid main() {\n    gl_FragColor = vColor;\n}"},fr={vertex:"precision highp float;\nattribute vec3 position;\nattribute vec3 next;\nattribute vec3 prev;\nattribute vec2 uv;\nattribute float side;\nattribute vec4 color;\nattribute float seg;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec2 uResolution;\nuniform float uDPR;\nuniform float uThickness;\nuniform float uMiter;\n\nvarying vec2 vUv;\nvarying vec4 vColor;\nvarying float fSeg;\n\nvec4 getPosition() {\n    mat4 mvp = projectionMatrix * modelViewMatrix;\n    vec4 current = mvp * vec4(position, 1);\n    vec4 nextPos = mvp * vec4(next, 1);\n    vec4 prevPos = mvp * vec4(prev, 1);\n    vec2 aspect = vec2(uResolution.x / uResolution.y, 1);    \n    vec2 currentScreen = current.xy / current.w * aspect;\n    vec2 nextScreen = nextPos.xy / nextPos.w * aspect;\n    vec2 prevScreen = prevPos.xy / prevPos.w * aspect;\n\n    vec2 dir1 = normalize(currentScreen - prevScreen);\n    vec2 dir2 = normalize(nextScreen - currentScreen);\n    vec2 dir = normalize(dir1 + dir2);\n\n    vec2 normal = vec2(-dir.y, dir.x);\n    normal /= mix(1.0, max(0.3, dot(normal, vec2(-dir1.y, dir1.x))), uMiter);\n    normal /= aspect;\n    float pixelWidthRatio = 1.0 / (uResolution.y / uDPR);\n    float pixelWidth = current.w * pixelWidthRatio;\n    normal *= pixelWidth * uThickness;\n    current.xy -= normal * side;\n    return current;\n}\n\nvoid main() {\n    vUv = uv;\n    gl_Position = getPosition();\n    vColor = color;\n    fSeg = seg;\n}",fragment:"precision highp float;\n\nuniform float uTotalLength;\nuniform float uDashLength;\nuniform float uDashOffset;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\nvarying float fSeg;\n\nvoid main() {\n    float f = fract((uDashOffset + fSeg) / (2.0 * uDashLength));\n    f = 1.0 - step(0.5, f);\n    gl_FragColor = vColor * f;\n}"},vr={vertex:Jn,fragment:Qn},yr={vertex:Jn,fragment:Qn.replace(/(#ifdef FLAG_BUMP)/,"#define FLAG_BUMP\n$1")},br={vertex:tr,fragment:Kn},xr={vertex:tr,fragment:Kn.replace(/(#ifdef FLAG_BUMP)/,"#define FLAG_BUMP\n$1")};function wr(t,e=!1){return t.renderer.isWebgl2?e?xr:br:e?yr:vr}const Mr={vertex:ir,fragment:er},Lr={vertex:ir,fragment:er.replace(/(#ifdef FLAG_BUMP)/,"#define FLAG_BUMP\n$1")},Er={vertex:rr,fragment:nr},Pr={vertex:rr,fragment:nr.replace(/(#ifdef FLAG_BUMP)/,"#define FLAG_BUMP\n$1")};function _r(t,e=!1){return t.renderer.isWebgl2?e?Pr:Er:e?Lr:Mr}}])}));